# ü§ñ ÿ±ÿ®ÿßÿ™ ⁄Üÿ™ ŸÜÿßÿ¥ŸÜÿßÿ≥ ÿ™ŸÑ⁄Øÿ±ÿßŸÖ  

##**ÿßÿ±ÿ≤ÿ¥ ÿ≥Ÿàÿ±ÿ≥ ⁄ØÿßÿØ**

##ÿ±ÿ®ÿßÿ™ ⁄Üÿ™ ŸÜÿßÿ¥ŸÜÿßÿ≥ :
##- **⁄Üÿ™ ÿ™ÿµÿßÿØŸÅ€å - ÿßŸÜÿ™ÿÆÿßÿ® ÿ¨ŸÜÿ≥€åÿ™**
##- **ÿ≥€åÿ≥ÿ™ŸÖ ÿØÿπŸàÿß ÿ±ŸÅÿßŸÑ ⁄Ø€åÿ±€å ÿ®ÿ±ÿß€å ÿ≥⁄©Ÿá**
##- **ÿ≥€åÿ≥ÿ™ŸÖ ÿØÿπŸàÿ™ ÿ±ŸÅÿßŸÑ ⁄Ø€åÿ±€å ÿ®ÿ±ÿß€å ŸæŸàŸÑ**
##- **ŸæŸÜŸÑ ŸÖÿØ€åÿ±€åÿ™ Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá**
##- **ÿπÿ∂Ÿà€åÿ™ ÿßÿ¨ÿ®ÿßÿ±€å - ŸáŸÖ⁄ØÿßŸÜ€å - ŸÖÿØ€åÿ±€åÿ™ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ - ŸÖÿØ€åÿ±€åÿ™ ÿ±ŸÅÿßŸÑ ÿ≥⁄©Ÿá ŸÖŸàÿ¨ŸàÿØ€å ŸæŸàŸÑ ⁄©ÿßÿ±ÿ®ÿ± - ÿ®ŸÜ ÿßŸÜ ÿ®ŸÜ - Ÿà........**

## üõ† Ÿæ€åÿ¥ŸÜ€åÿßÿ≤
##- **Python**
##- **pyTelegramBotAPI**
##- **db-sqlite3**
##- **threading**
##- **traceback**

## Telegram : @YoungArvin
## Bale : @YoungArvin
## GitHub : https://github.com/iiiiArvin

## README LICENSE

import telebot
from telebot import types
import sqlite3
import time
import random
import string
import threading
import re
from telebot.types import LabeledPrice
from datetime import datetime, timedelta
import traceback


TOKEN = ''
ADMIN_IDS = {}

bot = telebot.TeleBot(TOKEN)


db_lock = threading.Lock()

def get_db_connection():

    conn = sqlite3.connect('chat_users.db', check_same_thread=False)
    return conn

# ------------------- ÿß€åÿ¨ÿßÿØ ÿ¨ÿØÿßŸàŸÑ -------------------
def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    conn.execute("PRAGMA journal_mode=WAL")
    conn.execute("PRAGMA cache_size = 10000")
    conn.execute("PRAGMA synchronous=NORMAL;") 
    conn.execute("PRAGMA temp_store=MEMORY;")

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS reports (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        reporter_id INTEGER,
        reported_id INTEGER,
        reason TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS channels (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id TEXT NOT NULL,
        title TEXT,
        invite_link TEXT,
        expire_at DATETIME
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS withdrawals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    amount INTEGER NOT NULL,
    status TEXT DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(user_id) REFERENCES users(user_id)
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS gifts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        gift TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS bot_inventory (
        id INTEGER PRIMARY KEY,
        balance INTEGER
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        coin_balance INTEGER DEFAULT 10,
        balance INTEGER DEFAULT 0,
        gender TEXT
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS waiting_users (
        user_id INTEGER PRIMARY KEY,
        desired_gender TEXT,
        join_time REAL
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS active_chats (
        user_id INTEGER PRIMARY KEY,
        partner_id INTEGER
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS anonymous_links (
        link_id TEXT PRIMARY KEY,
        user_id INTEGER
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS referral_links (
        referral_code TEXT PRIMARY KEY,
        user_id INTEGER
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS used_referrals (
        user_id INTEGER,
        referral_code TEXT,
        PRIMARY KEY (user_id, referral_code)
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS pending_referrals (
        user_id INTEGER PRIMARY KEY,
        referral_code TEXT,
        timestamp REAL
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS blocked_users (
        blocker_id INTEGER,
        blocked_id INTEGER,
        PRIMARY KEY (blocker_id, blocked_id)
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS last_chat (
        user_id INTEGER PRIMARY KEY,
        partner_id INTEGER
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS banned_users (
        user_id INTEGER PRIMARY KEY,
        ban_reason TEXT
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS pending_disconnect (
        user_id INTEGER PRIMARY KEY,
        pending INTEGER DEFAULT 0
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS money_referral_links (
        referral_code TEXT PRIMARY KEY,
        user_id INTEGER
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS used_money_referrals (
        user_id INTEGER,
        referral_code TEXT,
        PRIMARY KEY (user_id, referral_code)
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS monetary_balance (
        user_id INTEGER PRIMARY KEY,
        balance INTEGER DEFAULT 0
    )
    ''')

    conn.commit()
    conn.close()

init_db()

def init_logs():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS admin_logs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        admin_id INTEGER,
        action TEXT,
        details TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    cursor.execute('INSERT OR IGNORE INTO bot_inventory (id, balance) VALUES (1, 1000000)')
    conn.commit()
    conn.close()

init_logs()

# -- ÿ™Ÿàÿßÿ®ÿπ ⁄©ŸÖ⁄©€å 

def add_new_user(user_id):
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
        conn.commit()
        conn.close()

def generate_random_code(length=10):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def get_money_referral_code(user_id):
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT referral_code FROM money_referral_links WHERE user_id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            code = row[0]
        else:
            code = generate_random_code()
            cursor.execute('INSERT INTO money_referral_links (referral_code, user_id) VALUES (?, ?)', (code, user_id))
            conn.commit()
        conn.close()
    return code

def get_referral_code(user_id):
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT referral_code FROM referral_links WHERE user_id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            code = row[0]
        else:
            code = generate_random_code()
            cursor.execute('INSERT INTO referral_links (referral_code, user_id) VALUES (?, ?)', (code, user_id))
            conn.commit()
        conn.close()
    return code

def get_anonymous_link(user_id):
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT link_id FROM anonymous_links WHERE user_id = ?', (user_id,))
        row = cursor.fetchone()
        if row:
            link_id = row[0]
        else:
            link_id = generate_random_code()
            cursor.execute('INSERT INTO anonymous_links (link_id, user_id) VALUES (?, ?)', (link_id, user_id))
            conn.commit()
        conn.close()
    return link_id

def remove_active_chat(user_id):
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT partner_id FROM active_chats WHERE user_id = ?', (user_id,))
        row = cursor.fetchone()
        partner_id = None
        if row:
            partner_id = row[0]
            cursor.execute('DELETE FROM active_chats WHERE user_id IN (?, ?)', (user_id, partner_id))
            cursor.execute('INSERT OR REPLACE INTO last_chat (user_id, partner_id) VALUES (?, ?)', (user_id, partner_id))
            cursor.execute('INSERT OR REPLACE INTO last_chat (user_id, partner_id) VALUES (?, ?)', (partner_id, user_id))
            conn.commit()
        conn.close()
    return partner_id

def is_user_banned(user_id):
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT 1 FROM banned_users WHERE user_id = ?', (user_id,))
        banned = cursor.fetchone() is not None
        conn.close()
    return banned

def get_user_coin_balance(user_id):
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT coin_balance FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        conn.close()
    if result:
        return result[0]
    else:
        return 0

def is_in_active_chat(user_id):
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT partner_id FROM active_chats WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        conn.close()
    return result is not None

def get_bot_inventory():
    try:
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT balance FROM bot_inventory WHERE id = 1')
            row = cursor.fetchone()
            
            if not row:
                cursor.execute('INSERT INTO bot_inventory (id, balance) VALUES (1, 0)')
                conn.commit()
                return 0
            
            return row[0]
    
    except sqlite3.Error as e:
        print(f"{e}")
        return 0
    
    finally:
        if 'conn' in locals():
            conn.close()

# -- ŸÖŸÜŸà  
def get_inline_main_menu():
    markup = types.InlineKeyboardMarkup()
    btn_start = types.InlineKeyboardButton("ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™", callback_data="start_chat")
    btn_invite = types.InlineKeyboardButton("ŸÑ€åŸÜ⁄© ÿØÿπŸàÿ™", callback_data="referral_link")
    btn_anon = types.InlineKeyboardButton("ŸÑ€åŸÜ⁄© ŸÜÿßÿ¥ŸÜÿßÿ≥", callback_data="anon_link")
    btn_buy = types.InlineKeyboardButton("ÿÆÿ±€åÿØ ÿ≥⁄©Ÿá", callback_data="buy_coins")
    btn_help = types.InlineKeyboardButton("ÿ±ÿßŸáŸÜŸÖÿß", callback_data="help")
    btn_support = types.InlineKeyboardButton("Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å", callback_data="support")
    btn_earn = types.InlineKeyboardButton("Ÿæÿß⁄©ÿ™ ŸáÿØ€åŸá", callback_data="earn_money")
    markup.add(btn_anon, btn_invite)
    markup.add(btn_support, btn_buy)
    markup.add(btn_help,btn_earn)
    markup.add(btn_start)
    return markup

def get_buy_coins_menu():
    keyboard = types.InlineKeyboardMarkup()
    coin10 = types.InlineKeyboardButton("ÿÆÿ±€åÿØ 10 ÿ≥⁄©Ÿá", callback_data="coin_10")
    coin20 = types.InlineKeyboardButton("ÿÆÿ±€åÿØ 20 ÿ≥⁄©Ÿá", callback_data="coin_20")
    keyboard.add(coin10, coin20)
    coin50 = types.InlineKeyboardButton("ÿÆÿ±€åÿØ 50 ÿ≥⁄©Ÿá", callback_data="coin_50")
    coin80 = types.InlineKeyboardButton("ÿÆÿ±€åÿØ 80 ÿ≥⁄©Ÿá", callback_data="coin_80")
    keyboard.add(coin50, coin80)
    coin100 = types.InlineKeyboardButton("ÿÆÿ±€åÿØ 100 ÿ≥⁄©Ÿá", callback_data="coin_100")
    keyboard.add(coin100)
    btn_back = types.InlineKeyboardButton("ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_main")
    keyboard.add(btn_back)
    return keyboard

def get_inline_gender_selection():
    markup = types.InlineKeyboardMarkup()
    btn_female = types.InlineKeyboardButton("ÿØÿÆÿ™ÿ±", callback_data="set_gender_ÿØÿÆÿ™ÿ±")
    btn_male = types.InlineKeyboardButton("Ÿæÿ≥ÿ±", callback_data="set_gender_Ÿæÿ≥ÿ±")
    markup.add(btn_female, btn_male)
    return markup

def get_inline_partner_preference():
    markup = types.InlineKeyboardMarkup()
    btn_female = types.InlineKeyboardButton("ÿØÿÆÿ™ÿ±", callback_data="pref_ÿØÿÆÿ™ÿ±")
    btn_male = types.InlineKeyboardButton("Ÿæÿ≥ÿ±", callback_data="pref_Ÿæÿ≥ÿ±")
    btn_any = types.InlineKeyboardButton("ŸÖŸáŸÖ ŸÜ€åÿ≥ÿ™", callback_data="pref_ŸÖŸáŸÖ_ŸÜ€åÿ≥ÿ™")
    btn_back = types.InlineKeyboardButton("ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_main")
    markup.add(btn_female, btn_male)
    markup.add(btn_back)
    markup.add(btn_any)
    return markup

def get_reply_active_chat_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("ŸÇÿ∑ÿπ ⁄Üÿ™")
    return markup

def get_reply_confirm_keyboard():
    markup = types.InlineKeyboardMarkup()
    btn_confirm = types.InlineKeyboardButton("ÿ®ŸÑŸá", callback_data="confirm_stop")
    btn_cancel = types.InlineKeyboardButton("ŸÜŸá", callback_data="cancel_stop_in_chat")
    markup.add(btn_confirm, btn_cancel)
    return markup

def get_post_chat_menu():
    markup = types.InlineKeyboardMarkup()
    bleck = types.InlineKeyboardButton("ÿ®ŸÑÿß⁄© ⁄©ÿ±ÿØŸÜ ⁄©ÿßÿ±ÿ®ÿ±", callback_data="bleck")
    report = types.InlineKeyboardButton("⁄Øÿ≤ÿßÿ±ÿ¥", callback_data="report")
    btn_cancel = types.InlineKeyboardButton("ÿπÿØŸÖ ÿßŸÇÿØÿßŸÖ", callback_data="nthing")
    markup.add(bleck, report)
    markup.add(btn_cancel)
    return markup

@bot.message_handler(func=lambda message: message.text == "ŸÇÿ∑ÿπ ⁄Üÿ™" and message.chat.type == "private")
def disconnect_request_handler(message):
    user_id = message.chat.id
    if not is_in_active_chat(user_id):
        bot.send_message(user_id, "ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ ŸÜ€åÿ≥ÿ™€åÿØ.", reply_markup=get_inline_main_menu())
        return
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('INSERT OR REPLACE INTO pending_disconnect (user_id, pending) VALUES (?, ?)', (user_id, 1))
        conn.commit()
        conn.close()
    bot.send_message(user_id, "ÿ¢€åÿß ŸÖÿ∑ŸÖÿ¶ŸÜ Ÿáÿ≥ÿ™€åÿØ ⁄©Ÿá ŸÖ€å‚ÄåÿÆŸàÿßŸá€åÿØ ⁄Üÿ™ ÿ±ÿß ŸÇÿ∑ÿπ ⁄©ŸÜ€åÿØÿü", reply_markup=get_reply_confirm_keyboard())

@bot.callback_query_handler(func=lambda call: call.data == "cancel_stop_in_chat" and call.message.chat.type == "private")
def cancel_stop_in_chat(call):
    user_id = call.from_user.id
    if not is_in_active_chat(user_id):
        bot.send_message(user_id, "ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ ŸÜ€åÿ≥ÿ™€åÿØ.", reply_markup=get_inline_main_menu())
        return
    bot.edit_message_text("ÿ®ÿßÿ¥Ÿá ÿ®Ÿá ⁄Üÿ™ ÿßÿØÿßŸÖŸá ÿ®ÿØŸá :)",user_id,call.message.message_id,reply_markup=get_reply_active_chat_keyboard())

@bot.callback_query_handler(func=lambda call: call.data == "confirm_stop" and call.message.chat.type == "private")
def confirm_stop(call):
    user_id = call.from_user.id
    if not is_in_active_chat(user_id):
        bot.send_message(user_id, "ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ ŸÜ€åÿ≥ÿ™€åÿØ.", reply_markup=get_inline_main_menu())
        return

    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT pending FROM pending_disconnect WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        conn.close() 

    if not result or result[0] != 1:
        bot.send_message(user_id, "ÿπŸÖŸÑ€åÿßÿ™ ŸÜÿßŸÖÿπÿ™ÿ®ÿ±Ÿá\n\nÿ®ÿ±ÿß€å ŸÇÿ∑ÿπ ⁄©ÿ±ÿØŸÜ ⁄Üÿ™ ÿßÿ≤ ÿØ⁄©ŸÖŸá *ŸÇÿ∑ÿπ ⁄Üÿ™* ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ\n\nŸáŸÖ⁄ÜŸÜ€åŸÜ ŸÖ€åÿ™ŸàÿßŸÜ€åÿØ ÿ™ÿß€åŸæ ⁄©ŸÜ€åÿØ: *ŸÇÿ∑ÿπ ⁄Üÿ™*",reply_markup=get_reply_active_chat_keyboard())
        return

    partner_id = remove_active_chat(user_id)
    if partner_id:
        bot.edit_message_text(
            "ÿ¥ŸÖÿß ⁄Üÿ™ ÿ±ÿß ŸÇÿ∑ÿπ ⁄©ÿ±ÿØ€åÿØ.",
            chat_id=user_id,
            message_id=call.message.message_id,
            reply_markup=get_post_chat_menu()
        )
        bot.send_message(partner_id, "⁄©ÿßÿ±ÿ®ÿ± ŸÖŸÇÿßÿ®ŸÑ ⁄Üÿ™ ÿ±ÿß ŸÇÿ∑ÿπ ⁄©ÿ±ÿØ. ⁄Üÿ™ ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿ±ÿ≥€åÿØ.", reply_markup=get_post_chat_menu())
    else:
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('DELETE FROM waiting_users WHERE user_id = ?', (user_id,))
            conn.commit()
            conn.close()
        bot.edit_message_text(
            "ÿßÿ≤ ÿ≠ÿßŸÑÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿÆÿßÿ±ÿ¨ ÿ¥ÿØ€åÿØ.",
            chat_id=user_id,
            message_id=call.message.message_id,
            reply_markup=get_inline_main_menu()
        )

    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('DELETE FROM pending_disconnect WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()

def get_inline_waiting_menu():
    markup = types.InlineKeyboardMarkup()
    btn_stop_wait = types.InlineKeyboardButton("ŸÇÿ∑ÿπ ÿßŸÜÿ™ÿ∏ÿßÿ±", callback_data="disconnect_waiting")
    markup.add(btn_stop_wait)
    return markup

def check_user_gender(user_id):
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT coin_balance, gender FROM users WHERE user_id = ?', (user_id,))
        data = cursor.fetchone()

        if not data:
            cursor.execute('INSERT INTO users (user_id, coin_balance) VALUES (?, ?)', (user_id, 10))
            conn.commit()
            conn.close()
            bot.send_message(
                user_id,
                "ÿ®Ÿá ÿ±ÿ®ÿßÿ™ ⁄Üÿ™ ŸÜÿßÿ¥ŸÜÿßÿ≥ ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€åÿØ!\n\nÿ¨ŸÜÿ≥€åÿ™ ÿÆŸàÿØ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:",
                reply_markup=get_inline_gender_selection()
            )
            return False

        coin_balance, gender = data
        conn.close()
        if gender is None:
            bot.send_message(
                user_id,
                " ÿßÿ®ÿ™ÿØÿß ÿ¨ŸÜÿ≥€åÿ™ ÿÆŸàÿØ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:",
                reply_markup=get_inline_gender_selection()
            )
            return False
    return True
# -- ÿ¨Ÿà€åŸÜ ÿßÿ¨ÿ®ÿßÿ±€å
def add_channel(chat_id, title, invite_link, expire_at):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO channels (chat_id, title, invite_link, expire_at)
        VALUES (?, ?, ?, ?)
    """, (chat_id, title, invite_link, expire_at))
    conn.commit()
    conn.close()

def get_active_channels():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT chat_id, invite_link, title FROM channels WHERE datetime(expire_at) > datetime('now')")
    channels = cur.fetchall()
    conn.close()
    return channels


def check_channel_membership(chat_id, user_id):
    try:
        member = bot.get_chat_member(chat_id=chat_id, user_id=user_id)
        return member.status in ["creator", "administrator", "member"]
    except Exception:
        return False

def check_channels(user_id, msg):
    if msg is None:
        msg = ""
        
    channels = get_active_channels()
    
    not_member_channels = []
    for chat_id, invite_link, title in channels:
        is_member = check_channel_membership(chat_id, user_id)
        if not is_member:
            not_member_channels.append((chat_id, invite_link, title))
    
    if not_member_channels:
        markup = types.InlineKeyboardMarkup()
        buttons = [types.InlineKeyboardButton(title, url=invite_link) 
                   for _, invite_link, title in not_member_channels]
        markup.row(*buttons)

        vry = types.InlineKeyboardButton("ÿ™ÿ£€å€åÿØ ÿπÿ∂Ÿà€åÿ™", callback_data=f"verify_membership_{msg}")
        markup.add(vry)
        
        channels_list = "\n".join([f"‚Ä¢ {title}" for _, _, title in not_member_channels])
        bot.send_message(
            user_id,
            "‚ö†Ô∏è ÿ®ÿ±ÿß€å ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ ÿ±ÿ®ÿßÿ™ ÿ®ÿß€åÿØ ÿØÿ± ⁄©ÿßŸÜÿßŸÑ‚ÄåŸáÿß€å ÿ≤€åÿ± ÿπÿ∂Ÿà ÿ¥Ÿà€åÿØ:\n"
            f"{channels_list}\n"
            "Ÿæÿ≥ ÿßÿ≤ ÿπÿ∂Ÿà€åÿ™ ÿ±Ÿà€å ÿØ⁄©ŸÖŸá ¬´ÿ™ÿ£€å€åÿØ ÿπÿ∂Ÿà€åÿ™¬ª ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ:",
            reply_markup=markup
        )
        return False
    return True

@bot.callback_query_handler(func=lambda call: call.data.startswith("verify_membership_") and call.message.chat.type == "private")
def verify_membership(call):
    user_id = call.from_user.id
    add_new_user(user_id)
    message_id = call.message.message_id
    re = (call.data.split("_")[2])
    if not check_channels(user_id,msg=None):
        bot.send_message(user_id, " ÿ¥ŸÖÿß ŸáŸÜŸàÿ≤ ÿπÿ∂Ÿà ⁄©ÿßŸÜÿßŸÑ ŸÜÿ¥ÿØŸá‚Äåÿß€åÿØ!")
        return
    bot.edit_message_text(
        chat_id=user_id,
        message_id=message_id,
        text="‚úÖ ÿπÿ∂Ÿà€åÿ™ ÿ¥ŸÖÿß ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ™ÿ£€å€åÿØ ÿ¥ÿØ!",
        reply_markup=None
    )
    if re.startswith("/start ref-"):
        referral_code = re.split("ref-")[-1].strip()
        referral_handler(user_id,referral_code)
        return
    if re.startswith("/start send-"):  
        link_id = re.split("send-")[-1].strip()  
        anonymous_send_handler(user_id,link_id)
        return
    if re.startswith("/start money-"):  
        code = re.split("money-")[-1].strip()
        bot.send_message(574928595,code)
        money_referral_handler(user_id, code)
        return
# -- ÿßÿ≥ÿ™ÿßÿ±ÿ™
@bot.message_handler(commands=['start'],chat_types=["private"])
def start_handler(message):
    user_id = message.chat.id
    add_new_user(user_id)
    msg = message.text
    if not check_channels(user_id,msg):
        return
    if is_user_banned(user_id):
        bot.send_message(user_id, "ÿ¥ŸÖÿß ÿ®ŸÜ ÿ¥ÿØŸá‚Äåÿß€åÿØ.")
        return
    if message.text.startswith("/start ref-"):
        referral_code = message.text.split("ref-")[-1].strip()
        referral_handler(user_id,referral_code)
        return
    if message.text.startswith("/start send-"):  
        link_id = message.text.split("send-")[-1].strip()  
        anonymous_send_handler(user_id,link_id)
        return
    if message.text.startswith("/start money-"):  
        code = message.text.split("money-")[-1].strip()
        print(code)
        money_referral_handler(user_id, code)
        return
    if not check_user_gender(user_id):
        return 
    if is_in_active_chat(user_id):
        bot.send_message(user_id, "ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿáÿ≥ÿ™€åÿØ. ÿßÿ®ÿ™ÿØÿß ⁄Üÿ™ ŸÅÿπŸÑ€å ÿ±ÿß ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿØŸá€åÿØ.",reply_markup=get_reply_confirm_keyboard())
        return
    if is_user_in_waiting(user_id): 
        bot.send_message(user_id,"ÿ¥ŸÖÿß ÿßÿ®ÿ™ÿØÿß ÿ®ÿß€åÿØ ÿ≠ÿßŸÑÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ±ÿß ŸÑÿ∫Ÿà ⁄©ŸÜ€åÿØ ÿ≥Ÿæÿ≥",reply_markup=get_inline_waiting_menu())
        return

    welcome_text = (
        "ÿ®Ÿá ÿ±ÿ®ÿßÿ™ ⁄Üÿ™ ŸÜÿßÿ¥ŸÜÿßÿ≥ ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€åÿØ!\n\n"
        "ÿ®ÿ±ÿß€å ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™ ÿßÿ≤ ÿØ⁄©ŸÖŸá ¬´ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™¬ª ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ.\n"
        f"ŸÖŸàÿ¨ŸàÿØ€å ÿ≥⁄©Ÿá ÿ¥ŸÖÿß: {get_user_coin_balance(user_id)} ü™ô\n"
        f"ÿ¥ŸÜÿßÿ≥Ÿá ⁄©ÿßÿ±ÿ®ÿ±€å: {user_id} üë§"
    )
    bot.send_message(user_id, welcome_text, reply_markup=get_inline_main_menu())

# -- ÿ¨ŸÜÿ≥€åÿ™
@bot.callback_query_handler(func=lambda call: call.data.startswith("set_gender_") and call.message.chat.type == "private")
def gender_callback(call):
    user_id = call.from_user.id

    if is_user_in_waiting(user_id):  
        bot.send_message(user_id,"ÿ¥ŸÖÿß ÿßÿ®ÿ™ÿØÿß ÿ®ÿß€åÿØ ÿ≠ÿßŸÑÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ±ÿß ŸÑÿ∫Ÿà ⁄©ŸÜ€åÿØ ÿ≥Ÿæÿ≥",reply_markup=get_inline_waiting_menu())
        return
    if is_in_active_chat(user_id):
        bot.send_message(user_id, "ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿáÿ≥ÿ™€åÿØ. ÿßÿ®ÿ™ÿØÿß ⁄Üÿ™ ŸÅÿπŸÑ€å ÿ±ÿß ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿØŸá€åÿØ.",reply_markup=get_reply_confirm_keyboard())
        return
    gender = call.data.split("_")[-1]
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET gender = ? WHERE user_id = ?', (gender, user_id))
        conn.commit()
        conn.close()
   
    bot.edit_message_text("ŸÖŸÜŸà€å ÿßÿµŸÑ€å:", chat_id=user_id, message_id=call.message.message_id,
                          reply_markup=get_inline_main_menu())

# -- ŸáŸÜÿØŸÑ ŸÖŸÜŸà€å ÿßÿµŸÑ€å
@bot.callback_query_handler(func=lambda call: call.data == "referral_link"and call.message.chat.type == "private")
def referral_link1(call):
    user_id = call.from_user.id
    add_new_user(user_id)
    if is_user_in_waiting(user_id): 
        bot.send_message(user_id,"ÿ¥ŸÖÿß ÿßÿ®ÿ™ÿØÿß ÿ®ÿß€åÿØ ÿ≠ÿßŸÑÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ±ÿß ŸÑÿ∫Ÿà ⁄©ŸÜ€åÿØ ÿ≥Ÿæÿ≥",reply_markup=get_inline_waiting_menu())
        return
    if is_in_active_chat(user_id):
        bot.edit_message_text("ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿáÿ≥ÿ™€åÿØ. ÿßÿ®ÿ™ÿØÿß ⁄Üÿ™ ŸÅÿπŸÑ€å ÿ±ÿß ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿØŸá€åÿØ.", chat_id=user_id, message_id=call.message.message_id,
                          reply_markup=get_reply_confirm_keyboard())
        return
    if not check_channels(user_id,msg=None):
        return
    code = get_referral_code(user_id)
    referral_link = f"https://ble.ir/hide_me_chat_bot?start=ref-{code}"
    bot.edit_message_text(f"üîó ŸÑ€åŸÜ⁄© ÿØÿπŸàÿ™ ÿ¥ŸÖÿß:\n{referral_link}\n\nÿ®ÿß Ÿáÿ± ÿØÿπŸàÿ™ ŸÖŸàŸÅŸÇ 2 ÿ≥⁄©Ÿá ÿØÿ±€åÿßŸÅÿ™ ⁄©ŸÜ€åÿØ!", chat_id=user_id, message_id=call.message.message_id,
                          reply_markup=get_inline_main_menu())
    
@bot.callback_query_handler(func=lambda call: call.data == "anon_link"and call.message.chat.type == "private")
def anon_link1(call):
    user_id = call.from_user.id
    add_new_user(user_id)
    if is_user_in_waiting(user_id): 
        bot.send_message(user_id,"ÿ¥ŸÖÿß ÿßÿ®ÿ™ÿØÿß ÿ®ÿß€åÿØ ÿ≠ÿßŸÑÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ±ÿß ŸÑÿ∫Ÿà ⁄©ŸÜ€åÿØ ÿ≥Ÿæÿ≥",reply_markup=get_inline_waiting_menu())
        return
    if is_in_active_chat(user_id):
        bot.edit_message_text("ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿáÿ≥ÿ™€åÿØ. ÿßÿ®ÿ™ÿØÿß ⁄Üÿ™ ŸÅÿπŸÑ€å ÿ±ÿß ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿØŸá€åÿØ.", chat_id=user_id, message_id=call.message.message_id,
                          reply_markup=get_reply_confirm_keyboard())
        return
    if not check_channels(user_id,msg=None):
        return
    link_id = get_anonymous_link(user_id)
    anon_link = f"https://ble.ir/hide_me_chat_bot?start=send-{link_id}"
    bot.edit_message_text(f"üîó ŸÑ€åŸÜ⁄© ŸÜÿßÿ¥ŸÜÿßÿ≥ ÿ¥ŸÖÿß:\n{anon_link}\n\nŸáÿ±⁄©ÿ≥ ÿß€åŸÜ ŸÑ€åŸÜ⁄© ÿ±ÿß ÿ®ÿßÿ≤ ⁄©ŸÜÿØ ŸÖ€å‚Äåÿ™ŸàÿßŸÜÿØ ÿ®Ÿá ÿ¥ŸÖÿß Ÿæ€åÿßŸÖ ŸÜÿßÿ¥ŸÜÿßÿ≥ ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜÿØ!", chat_id=user_id, message_id=call.message.message_id,
                          reply_markup=get_inline_main_menu())
    
# ÿß€åŸÜ ÿ®ÿÆÿ¥ ÿØÿ± ÿ®ŸÑŸá ÿ¨Ÿàÿßÿ®Ÿá

@bot.callback_query_handler(func=lambda call: call.data.startswith("coin_")and call.message.chat.type == "private")
def gender1_callback(call):
    user_id = call.from_user.id
    add_new_user(user_id)
    if is_user_in_waiting(user_id):
        bot.send_message(user_id,"ÿ¥ŸÖÿß ÿßÿ®ÿ™ÿØÿß ÿ®ÿß€åÿØ ÿ≠ÿßŸÑÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ±ÿß ŸÑÿ∫Ÿà ⁄©ŸÜ€åÿØ ÿ≥Ÿæÿ≥",reply_markup=get_inline_waiting_menu())
        return
    if is_in_active_chat(user_id):
        bot.send_message(user_id, "ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿáÿ≥ÿ™€åÿØ. ÿßÿ®ÿ™ÿØÿß ⁄Üÿ™ ŸÅÿπŸÑ€å ÿ±ÿß ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿØŸá€åÿØ.", reply_markup=get_reply_confirm_keyboard())
        return
    if not check_channels(user_id,msg=None):
        return

    coin = int(call.data.split("_")[-1])
    price = get_coin_price(coin) 

    if price is not None:
        amount_in_toman = price  
        amount_in_rial = amount_in_toman * 10  
        labeled_price = LabeledPrice(label=f"{coin}", amount=amount_in_rial)
        
        payload = f"{user_id}:{coin}"
        
        bot.send_invoice(
            user_id,
            title=f"ÿÆÿ±€åÿØ {coin} ÿ≥⁄©Ÿá",
            currency="IRR",
            description="ÿ¥ÿßÿ±⁄ò ÿ≠ÿ≥ÿßÿ® ⁄©ÿßÿ±ÿ®ÿ±€å ÿØÿ± ÿ±ÿ®ÿßÿ™",
            provider_token="ÿ¥ŸÖÿßÿ±Ÿá ⁄©ÿßÿ±ÿ™",
            prices=[labeled_price],  
            invoice_payload=payload
        )

    else:
            bot.send_message(user_id, "ŸÖŸÇÿØÿßÿ± ÿ≥⁄©Ÿá ŸÖÿπÿ™ÿ®ÿ± ŸÜ€åÿ≥ÿ™.")

def get_coin_price(coin):
    """ÿ™ÿßÿ®ÿπ€å ÿ®ÿ±ÿß€å ÿØÿ±€åÿßŸÅÿ™ ŸÇ€åŸÖÿ™ ÿ®ÿ± ÿßÿ≥ÿßÿ≥ ÿ™ÿπÿØÿßÿØ ÿ≥⁄©Ÿá"""
    coin_prices = {
        10: 2500,  
        20: 5000,  
        50: 7500,  
        80: 10000,  
        100: 15000
    }
    return coin_prices.get(coin)

@bot.message_handler(content_types=["successful_payment"],chat_types=["private"])
def successful_payment_handler(message):
    sp = message.successful_payment
    prices = sp.total_amount
    payload_parts = sp.invoice_payload.split(":")
    user_id = int(payload_parts[0])
    purchased_coins = int(payload_parts[1])


    add_coins_to_user_account(user_id=user_id, coin=purchased_coins,prices=prices)

def add_coins_to_user_account(user_id, coin, prices):
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET coin_balance = coin_balance + ? WHERE user_id = ?", (coin, user_id))
        conn.commit()
        conn.close()
    bot.send_message(
    user_id,
    f"‚ú® *ÿ¥ÿßÿ±⁄ò ÿ≠ÿ≥ÿßÿ® ÿ¥ŸÖÿß ÿßŸÜÿ¨ÿßŸÖ ÿ¥ÿØ*\n\n"
    f"üîπ *ÿ≥⁄©Ÿá:* {coin} +\n"
    f"üî∏ *ŸÖÿ®ŸÑÿ∫ Ÿæÿ±ÿØÿßÿÆÿ™€å:* {prices} ÿ±€åÿßŸÑ"
    )


@bot.callback_query_handler(func=lambda call: call.data == "buy_coins" and call.message.chat.type == "private")
def buy_coins1(call):
    user_id = call.from_user.id
    if is_user_in_waiting(user_id):  
        bot.send_message(user_id,"ÿ¥ŸÖÿß ÿßÿ®ÿ™ÿØÿß ÿ®ÿß€åÿØ ÿ≠ÿßŸÑÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ±ÿß ŸÑÿ∫Ÿà ⁄©ŸÜ€åÿØ ÿ≥Ÿæÿ≥",reply_markup=get_inline_waiting_menu())
        return
    if is_in_active_chat(user_id):
        bot.edit_message_text("ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿáÿ≥ÿ™€åÿØ. ÿßÿ®ÿ™ÿØÿß ⁄Üÿ™ ŸÅÿπŸÑ€å ÿ±ÿß ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿØŸá€åÿØ.", chat_id=user_id, message_id=call.message.message_id,
                          reply_markup=get_reply_confirm_keyboard())
        return
    if not check_channels(user_id,msg=None):
        return
    bot.edit_message_text("ÿÆÿ±€åÿØ ÿ≥⁄©Ÿá \nÿßŸÖ⁄©ÿßŸÜ ÿ¥ÿßÿ±⁄ò ÿ≠ÿ≥ÿßÿ® ÿ®ÿß Ÿæÿß⁄©ÿ™ ÿßŸÖ⁄©ÿßŸÜ Ÿæÿ∞€åÿ±Ÿá ÿ®ÿ±ÿß€å ÿ¥ÿßÿ±⁄ò ÿ≠ÿ≥ÿßÿ® ÿ®ÿß Ÿæÿß⁄©ÿ™ ÿ®Ÿá ÿß€å ÿØ€å ÿ≤€åÿ± ŸÖÿ±ÿßÿ¨ÿπŸá ⁄©ŸÜ€åÿØ.\n@iiiirich:", chat_id=user_id, message_id=call.message.message_id,
                          reply_markup=get_buy_coins_menu())

@bot.callback_query_handler(func=lambda call: call.data == "support" and call.message.chat.type == "private")
def support1(call):
    user_id = call.from_user.id
    if is_user_in_waiting(user_id):  
        bot.send_message(user_id,"ÿ¥ŸÖÿß ÿßÿ®ÿ™ÿØÿß ÿ®ÿß€åÿØ ÿ≠ÿßŸÑÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ±ÿß ŸÑÿ∫Ÿà ⁄©ŸÜ€åÿØ ÿ≥Ÿæÿ≥",reply_markup=get_inline_waiting_menu())
        return
    if is_in_active_chat(user_id):
        bot.edit_message_text("ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿáÿ≥ÿ™€åÿØ. ÿßÿ®ÿ™ÿØÿß ⁄Üÿ™ ŸÅÿπŸÑ€å ÿ±ÿß ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿØŸá€åÿØ.", chat_id=user_id, message_id=call.message.message_id,
                          reply_markup=get_reply_confirm_keyboard())
        return
    if not check_channels(user_id,msg=None):
        return
    support_text = "ÿ®ÿ±ÿß€å Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ®ÿß ŸÖÿß ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±€åÿØ:\nÿ¢€åÿØ€å: @iiiirich"
    bot.edit_message_text(support_text, chat_id=user_id, message_id=call.message.message_id,
                          reply_markup=get_inline_main_menu())
    
@bot.callback_query_handler(func=lambda call: call.data == "help" and call.message.chat.type == "private")
def help1(call):
    user_id = call.from_user.id
    if is_user_in_waiting(user_id): 
        bot.send_message(user_id,"ÿ¥ŸÖÿß ÿßÿ®ÿ™ÿØÿß ÿ®ÿß€åÿØ ÿ≠ÿßŸÑÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ±ÿß ŸÑÿ∫Ÿà ⁄©ŸÜ€åÿØ ÿ≥Ÿæÿ≥",reply_markup=get_inline_waiting_menu())
        return
    if is_in_active_chat(user_id):
        bot.edit_message_text("ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿáÿ≥ÿ™€åÿØ. ÿßÿ®ÿ™ÿØÿß ⁄Üÿ™ ŸÅÿπŸÑ€å ÿ±ÿß ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿØŸá€åÿØ.", chat_id=user_id, message_id=call.message.message_id,
                          reply_markup=get_reply_confirm_keyboard())
        return
    if not check_channels(user_id,msg=None):
        return
    help_text = (
            "ÿ±ÿßŸáŸÜŸÖÿß:\n"
            "1. ÿ®ÿ±ÿß€å ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™ÿå ÿ±Ÿà€å ¬´ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™¬ª ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ.\n"
            "2. ÿ≥Ÿæÿ≥ ÿ™ÿ±ÿ¨€åÿ≠ ŸÖÿÆÿßÿ∑ÿ® (ÿØÿÆÿ™ÿ±ÿå Ÿæÿ≥ÿ± €åÿß ŸÖŸáŸÖ ŸÜ€åÿ≥ÿ™) ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ.\n"
            "3. ÿØÿ± ÿ≠€åŸÜ ⁄Üÿ™ÿå ÿßÿ≤ ÿØ⁄©ŸÖŸá ¬´ŸÇÿ∑ÿπ ⁄Üÿ™¬ª ÿ®ÿ±ÿß€å Ÿæÿß€åÿßŸÜ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ.\n"
            "4. ÿ®ÿ±ÿß€å Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿßÿ≤ ⁄Øÿ≤€åŸÜŸá ¬´Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å¬ª ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ."
        )
    bot.edit_message_text(help_text, chat_id=user_id, message_id=call.message.message_id,
                          reply_markup=get_inline_main_menu())
    
# -- ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™
@bot.callback_query_handler(func=lambda call: call.data == "start_chat" and call.message.chat.type == "private")
def start_chat_callback(call):
    user_id = call.from_user.id
    if is_user_in_waiting(user_id):  
        bot.send_message(user_id,"ÿ¥ŸÖÿß ÿßÿ®ÿ™ÿØÿß ÿ®ÿß€åÿØ ÿ≠ÿßŸÑÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ±ÿß ŸÑÿ∫Ÿà ⁄©ŸÜ€åÿØ ÿ≥Ÿæÿ≥",reply_markup=get_inline_waiting_menu())
        return
    if is_in_active_chat(user_id):
        
        bot.edit_message_text("ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿáÿ≥ÿ™€åÿØ. ÿßÿ®ÿ™ÿØÿß ⁄Üÿ™ ŸÅÿπŸÑ€å ÿ±ÿß ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿØŸá€åÿØ.", chat_id=user_id, message_id=call.message.message_id,
                          reply_markup=get_reply_confirm_keyboard())
        return
    if not check_channels(user_id,msg=None):
        return

    coin_balance = get_user_coin_balance(user_id)
    if coin_balance < 1:
        bot.edit_message_text(" ",user_id,call.message.message_id,reply_markup=get_buy_coins_menu())
        return 
    if not check_user_gender(user_id):
        return 
    bot.edit_message_text(" ÿ™ÿ±ÿ¨€åÿ≠ ÿ¥ÿ±€å⁄© ÿÆŸàÿØ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:",user_id,call.message.message_id,reply_markup=get_inline_partner_preference())
    
@bot.callback_query_handler(func=lambda call: call.data.startswith("pref_") and call.message.chat.type == "private")
def partner_pref_callback(call):
    user_id = call.from_user.id
    if is_user_in_waiting(user_id): 
        bot.send_message(user_id,"ÿ¥ŸÖÿß ÿßÿ®ÿ™ÿØÿß ÿ®ÿß€åÿØ ÿ≠ÿßŸÑÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ±ÿß ŸÑÿ∫Ÿà ⁄©ŸÜ€åÿØ ÿ≥Ÿæÿ≥",reply_markup=get_inline_waiting_menu())
        return
    if is_in_active_chat(user_id):
        bot.edit_message_text("ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿáÿ≥ÿ™€åÿØ. ÿßÿ®ÿ™ÿØÿß ⁄Üÿ™ ŸÅÿπŸÑ€å ÿ±ÿß ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿØŸá€åÿØ.", chat_id=user_id, message_id=call.message.message_id,
                          reply_markup=get_reply_confirm_keyboard())
        return
    if not check_channels(user_id,msg=None):
        return
    pref = call.data.split("_")[-1]
    if pref == "ŸÖŸáŸÖ":
        pref = "ŸÖŸáŸÖ ŸÜ€åÿ≥ÿ™"
    join_time = time.time()
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('INSERT OR REPLACE INTO waiting_users (user_id, desired_gender, join_time) VALUES (?, ?, ?)',
                       (user_id, pref, join_time))
        conn.commit()
        conn.close()
    waiting_message = bot.edit_message_text("ÿØÿ± ÿ≠ÿßŸÑ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ®ÿ±ÿß€å Ÿæ€åÿØÿß ÿ¥ÿØŸÜ ÿ¥ÿ±€å⁄© ⁄Üÿ™...", chat_id=user_id,
                                              message_id=call.message.message_id, reply_markup=get_inline_waiting_menu())
    waiting_message_id = waiting_message.edit_date

    threading.Thread(target=find_match_for_user, args=(user_id, waiting_message_id,)).start()

@bot.callback_query_handler(func=lambda call: call.data == "back_main" and call.message.chat.type == "private")
def back_main_callback(call):
    user_id = call.from_user.id
    if is_user_in_waiting(user_id):  
        bot.send_message(user_id,"ÿ¥ŸÖÿß ÿßÿ®ÿ™ÿØÿß ÿ®ÿß€åÿØ ÿ≠ÿßŸÑÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ±ÿß ŸÑÿ∫Ÿà ⁄©ŸÜ€åÿØ ÿ≥Ÿæÿ≥",reply_markup=get_inline_waiting_menu())
        return
    if is_in_active_chat(user_id):
        bot.edit_message_text("ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿáÿ≥ÿ™€åÿØ. ÿßÿ®ÿ™ÿØÿß ⁄Üÿ™ ŸÅÿπŸÑ€å ÿ±ÿß ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿØŸá€åÿØ.", chat_id=user_id, message_id=call.message.message_id,
                          reply_markup=get_reply_confirm_keyboard())
        return
    if not check_channels(user_id,msg=None):
        return
    bot.edit_message_text("ŸÖŸÜŸà€å ÿßÿµŸÑ€å:", chat_id=user_id, message_id=call.message.message_id,
                          reply_markup=get_inline_main_menu())

# -- Ÿæ€åÿØÿß ⁄©ÿ±ÿØŸÜ €åÿßÿ±
def is_compatible(user_a, pref_a, user_b, pref_b, user_id, candidate_id):
    cond_a = (pref_a == "ŸÖŸáŸÖ ŸÜ€åÿ≥ÿ™") or (user_b == pref_a)
    cond_b = (pref_b == "ŸÖŸáŸÖ ŸÜ€åÿ≥ÿ™") or (user_a == pref_b)
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT 1 FROM blocked_users WHERE blocker_id = ? AND blocked_id = ?', (user_id, candidate_id))
        if cursor.fetchone():
            conn.close()
            return False
        cursor.execute('SELECT 1 FROM blocked_users WHERE blocker_id = ? AND blocked_id = ?', (candidate_id, user_id))
        if cursor.fetchone():
            conn.close()
            return False
        conn.close()
    return cond_a and cond_b

def find_match_for_user(user_id, waiting_message_id):
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT gender, coin_balance FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        if not result:
            conn.close()
            return
        user_gender, coin_balance = result
        cursor.execute('SELECT desired_gender FROM waiting_users WHERE user_id = ?', (user_id,))
        res = cursor.fetchone()
        if not res:
            conn.close()
            return
        my_pref = res[0]
        cursor.execute('SELECT user_id, desired_gender FROM waiting_users WHERE user_id != ?', (user_id,))
        candidates = cursor.fetchall()
        conn.close()

    for candidate in candidates:
        candidate_id, candidate_pref = candidate
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT gender, coin_balance FROM users WHERE user_id = ?', (candidate_id,))
            candidate_info = cursor.fetchone()
            conn.close()
        if not candidate_info:
            continue
        candidate_gender, candidate_coins = candidate_info
        if coin_balance < 1 or candidate_coins < 1:
            continue
        if is_compatible(user_gender, my_pref, candidate_gender, candidate_pref, user_id, candidate_id):
            
            with db_lock:
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute('INSERT OR REPLACE INTO active_chats (user_id, partner_id) VALUES (?, ?)', (user_id, candidate_id))
                cursor.execute('INSERT OR REPLACE INTO active_chats (user_id, partner_id) VALUES (?, ?)', (candidate_id, user_id))
                cursor.execute('DELETE FROM waiting_users WHERE user_id IN (?, ?)', (user_id, candidate_id))
                
                cursor.execute("UPDATE users SET coin_balance = coin_balance - 1 WHERE user_id = ?", (user_id,))
                cursor.execute("UPDATE users SET coin_balance = coin_balance - 1 WHERE user_id = ?", (candidate_id,))
                conn.commit()
                conn.close()
            
            try:
                bot.delete_message(user_id, waiting_message_id)
            except Exception as e:
                pass
            bot.edit_message_text("ÿ¥ŸÖÿß ÿ®ÿß €å⁄© ⁄©ÿßÿ±ÿ®ÿ± Ÿæ€åÿØÿß ÿ¥ÿØ€åÿØ. ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™!", user_id, waiting_message_id)
            bot.send_message(user_id, "ÿ¥ŸÖÿß ÿ®ÿß €å⁄© ⁄©ÿßÿ±ÿ®ÿ± Ÿæ€åÿØÿß ÿ¥ÿØ€åÿØ. ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™!", reply_markup=get_reply_active_chat_keyboard())
            bot.send_message(candidate_id, "ÿ¥ŸÖÿß ÿ®ÿß €å⁄© ⁄©ÿßÿ±ÿ®ÿ± Ÿæ€åÿØÿß ÿ¥ÿØ€åÿØ. ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™!", reply_markup=get_reply_active_chat_keyboard())
            return
        
    for candidate in candidates:
        candidate_id, candidate_pref = candidate
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT gender, coin_balance FROM users WHERE user_id = ?', (candidate_id,))
            candidate_info = cursor.fetchone()
            conn.close()
        if not candidate_info:
            continue
        candidate_gender, candidate_coins = candidate_info
        if coin_balance < 1 or candidate_coins < 1:
            continue
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT 1 FROM blocked_users WHERE blocker_id = ? AND blocked_id = ?', (user_id, candidate_id))
            if cursor.fetchone():
                conn.close()
                continue
            cursor.execute('SELECT 1 FROM blocked_users WHERE blocker_id = ? AND blocked_id = ?', (candidate_id, user_id))
            if cursor.fetchone():
                conn.close()
                continue
            conn.close()
        
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('INSERT OR REPLACE INTO active_chats (user_id, partner_id) VALUES (?, ?)', (user_id, candidate_id))
            cursor.execute('INSERT OR REPLACE INTO active_chats (user_id, partner_id) VALUES (?, ?)', (candidate_id, user_id))
            cursor.execute('DELETE FROM waiting_users WHERE user_id IN (?, ?)', (user_id, candidate_id))

            cursor.execute("UPDATE users SET coin_balance = coin_balance - 1 WHERE user_id = ?", (user_id,))
            cursor.execute("UPDATE users SET coin_balance = coin_balance - 1 WHERE user_id = ?", (candidate_id,))
            conn.commit()
            conn.close()
        try:
            bot.delete_message(user_id, waiting_message_id)
        except Exception as e:
            pass
        bot.send_message(user_id, "ÿ¥ŸÖÿß ÿ®ÿß €å⁄© ⁄©ÿßÿ±ÿ®ÿ± Ÿæ€åÿØÿß ÿ¥ÿØ€åÿØ. ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™!", reply_markup=get_reply_active_chat_keyboard())
        bot.send_message(candidate_id, "ÿ¥ŸÖÿß ÿ®ÿß €å⁄© ⁄©ÿßÿ±ÿ®ÿ± Ÿæ€åÿØÿß ÿ¥ÿØ€åÿØ. ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™!", reply_markup=get_reply_active_chat_keyboard())
        return
# -- ŸáŸÜÿØŸÑ Ÿáÿß€å ÿØ€å⁄ØŸá
@bot.callback_query_handler(func=lambda call: call.data == "withdraw" and call.message.chat.type == "private")
def withdraw(call):
    user_id = call.from_user.id
    if is_user_in_waiting(user_id):  
        bot.send_message(user_id,"ÿ¥ŸÖÿß ÿßÿ®ÿ™ÿØÿß ÿ®ÿß€åÿØ ÿ≠ÿßŸÑÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ±ÿß ŸÑÿ∫Ÿà ⁄©ŸÜ€åÿØ ÿ≥Ÿæÿ≥",reply_markup=get_inline_waiting_menu())
        return 
    if is_in_active_chat(user_id):
        bot.edit_message_text("ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿáÿ≥ÿ™€åÿØ. ÿßÿ®ÿ™ÿØÿß ⁄Üÿ™ ŸÅÿπŸÑ€å ÿ±ÿß ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿØŸá€åÿØ.", chat_id=user_id, message_id=call.message.message_id,
                          reply_markup=get_reply_confirm_keyboard())
        return
    if not check_channels(user_id,msg=None):
        return
    
    
    msg = bot.edit_message_text("üí∞  ŸÖÿ®ŸÑÿ∫ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ®ÿ±ÿß€å ÿ®ÿ±ÿØÿßÿ¥ÿ™ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:",user_id,call.message.message_id)
    bot.register_next_step_handler(msg, process_withdrawal_amount)

def process_withdrawal_amount(message):
    user_id = message.from_user.id
    try:
        amount = float(message.text)

        if not amount.is_integer():
            bot.send_message(user_id, "‚ö†Ô∏è  ŸÅŸÇÿ∑ ÿπÿØÿØ ÿµÿ≠€åÿ≠ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ")
            return

        amount = int(amount)
        
        if amount < 1250:
            bot.send_message(user_id, "ÿ≠ÿØÿßŸÇŸÑ ŸÖÿ®ŸÑÿ∫ ÿ®ÿ±ÿØÿßÿ¥ÿ™ 1,250 ÿ™ŸàŸÖÿßŸÜ ÿßÿ≥ÿ™!")
            return
        
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
            balance = cursor.fetchone()[0]
            
            if balance < amount:
                bot.send_message(user_id, f"ŸÖŸàÿ¨ŸàÿØ€å ⁄©ÿßŸÅ€å ŸÜ€åÿ≥ÿ™! ŸÖŸàÿ¨ŸàÿØ€å ÿ¥ŸÖÿß: {balance} ÿ™ŸàŸÖÿßŸÜ")
                conn.close()
                return

            cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, user_id))
            
            tax = int(amount * 0.1)
            finall_amount = amount - tax

            cursor.execute(
                "INSERT INTO withdrawals (user_id, amount, tax, status) VALUES (?, ?, ?, 'pending')",
                (user_id, amount, tax) 
            )
            conn.commit()
            conn.close()
            
            admin_id = 574928595  
            keyboard = types.InlineKeyboardMarkup()
            approve_btn = types.InlineKeyboardButton(
                "ÿ™ÿ£€å€åÿØ ‚úÖ", 
                callback_data=f"approve|{user_id}|{finall_amount}|{message.from_user.username}"
            )
            reject_btn = types.InlineKeyboardButton(
                "ÿ±ÿØ ", 
                callback_data=f"reject|{user_id}|{finall_amount}"
            )
            keyboard.add(approve_btn, reject_btn)
            
            bot.send_message(
                admin_id,
                f"üì• ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ ÿ®ÿ±ÿØÿßÿ¥ÿ™ ÿ¨ÿØ€åÿØ!\n⁄©ÿßÿ±ÿ®ÿ±: {user_id}\nŸÖÿ®ŸÑÿ∫: {finall_amount} ÿ™ŸàŸÖÿßŸÜ (@{message.from_user.username})",
                reply_markup=keyboard
            )
            bot.send_message(user_id, f"‚úÖ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ ÿ¥ŸÖÿß ÿ®ÿ±ÿß€å ÿßÿØŸÖ€åŸÜ ÿßÿ±ÿ≥ÿßŸÑ ÿ¥ÿØ.\nŸÖÿ®ŸÑÿ∫ ŸÜŸáÿß€å€å ŸÇÿßÿ®ŸÑ ÿ®ÿ±ÿØÿßÿ¥ÿ™: {finall_amount} ÿ™ŸàŸÖÿßŸÜ")
            
    except ValueError:
        bot.send_message(user_id, "‚ö†Ô∏è  ŸÅŸÇÿ∑ ÿπÿØÿØ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ")

@bot.callback_query_handler(func=lambda call: call.data.startswith("approve|") and call.message.chat.type == "private")
def approve_withdrawal(call):
    try:
        data = call.data.split("|")
        user_id = int(data[1])
        finall_amount = int(data[2])
        from_user = data[3]
        
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE withdrawals SET status = 'approved' WHERE user_id = ? AND amount = ?",
                (user_id, finall_amount)
            )
            conn.commit()
            conn.close()
        
        bot.edit_message_text(
            f"‚úÖ ÿ®ÿ±ÿØÿßÿ¥ÿ™ {finall_amount} ÿ™ŸàŸÖÿßŸÜ ÿ®ÿ±ÿß€å ⁄©ÿßÿ±ÿ®ÿ± {user_id} (@{from_user}) ÿ™ÿ£€å€åÿØ ÿ¥ÿØ.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        bot.send_message(user_id, f"‚úÖ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ ÿ®ÿ±ÿØÿßÿ¥ÿ™ ÿ¥ŸÖÿß ÿ®ÿ±ÿß€å ŸÖÿ®ŸÑÿ∫ {finall_amount} ÿ™ŸàŸÖÿßŸÜ ÿ™ÿ£€å€åÿØ ÿ¥ÿØ!")
    except Exception as e:
        print(f"Error: {e}")
        bot.send_message(user_id, "ÿÆÿ∑ÿß ÿØÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("reject|") and call.message.chat.type == "private")
def reject_withdrawal(call):
    try:
        data = call.data.split("|")
        user_id = int(data[1])
        finall_amount = int(data[2])
        
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()

            cursor.execute(
                "SELECT amount, tax FROM withdrawals WHERE user_id = ? AND amount = ?",
                (user_id, finall_amount + int(finall_amount * 0.1)))
            original_amount, tax = cursor.fetchone()

            cursor.execute(
                "UPDATE users SET balance = balance + ? WHERE user_id = ?",
                (original_amount, user_id)
            )

            cursor.execute(
                "UPDATE withdrawals SET status = 'rejected' WHERE user_id = ? AND amount = ?",
                (user_id, original_amount)
            )
            
            conn.commit()
            conn.close()
        
        bot.edit_message_text(
            f" ÿ®ÿ±ÿØÿßÿ¥ÿ™ {finall_amount} ÿ™ŸàŸÖÿßŸÜ ÿ®ÿ±ÿß€å ⁄©ÿßÿ±ÿ®ÿ± {user_id} ÿ±ÿØ ÿ¥ÿØ. ŸÖŸàÿ¨ŸàÿØ€å ÿ®ÿßÿ≤⁄Øÿ±ÿØÿßŸÜÿØŸá ÿ¥ÿØ.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        bot.send_message(user_id, f" ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ ÿ®ÿ±ÿØÿßÿ¥ÿ™ ÿ¥ŸÖÿß ÿ±ÿØ ÿ¥ÿØ. {original_amount} ÿ™ŸàŸÖÿßŸÜ ÿ®Ÿá ÿ≠ÿ≥ÿßÿ® ÿ¥ŸÖÿß ÿ®ÿßÿ≤⁄Øÿ¥ÿ™.")
        
    except Exception as e:
        print(f"Error: {e}")
        bot.send_message(user_id, "ÿÆÿ∑ÿß ÿØÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥!  ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±€åÿØ.")

@bot.callback_query_handler(func=lambda call: call.data == "earn_money" and call.message.chat.type == "private")
def earn_money_handler(call):
    user_id = call.from_user.id 
    if is_user_in_waiting(user_id):  
        bot.send_message(user_id,"ÿ¥ŸÖÿß ÿßÿ®ÿ™ÿØÿß ÿ®ÿß€åÿØ ÿ≠ÿßŸÑÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ±ÿß ŸÑÿ∫Ÿà ⁄©ŸÜ€åÿØ ÿ≥Ÿæÿ≥",reply_markup=get_inline_waiting_menu())
        return 
    if is_in_active_chat(user_id):
        bot.edit_message_text("ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿáÿ≥ÿ™€åÿØ. ÿßÿ®ÿ™ÿØÿß ⁄Üÿ™ ŸÅÿπŸÑ€å ÿ±ÿß ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿØŸá€åÿØ.", chat_id=user_id, message_id=call.message.message_id,
                          reply_markup=get_reply_confirm_keyboard())
        return
    if not check_channels(user_id,msg=None):
        return
    code = get_money_referral_code(user_id)
    money_link = f"https://ble.ir/hide_me_chat_bot?start=money-{code}"
    
    
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
        row = cursor.fetchone()
        balance = row[0] if row else 0
        conn.close()
    
    
    if balance >= 1250:
        
        inline_kb = types.InlineKeyboardMarkup(row_width=1)
        inline_kb.add(types.InlineKeyboardButton("ÿØÿ±€åÿßŸÅÿ™ Ÿæÿß⁄©ÿ™ ŸáÿØ€åŸá", callback_data="withdraw"))
        inline_kb.add(types.InlineKeyboardButton("ŸÖŸÜŸà€å ÿßÿµŸÑ€å", callback_data="back_main"))
        withdraw_text = "\nÿ¥ŸÖÿß Ÿàÿßÿ¨ÿØ ÿ¥ÿ±ÿß€åÿ∑ ÿ®ÿ±ÿØÿßÿ¥ÿ™ Ÿáÿ≥ÿ™€åÿØ."
    else:
        inline_kb = get_inline_main_menu()
        withdraw_text = ""
    
    text = (f"üîóÿß€åŸÜ ŸÑ€åŸÜ⁄© ŸÖŸÜÿ≠ÿµÿ±ŸÅ ÿ®Ÿá ŸÅÿ±ÿØ ÿÆŸàÿØÿ™Ÿà ÿ®ÿ±ÿß€å 10 ŸÜŸÅÿ± ÿ®ŸÅÿ±ÿ≥ÿ™ Ÿæÿß⁄©ÿ™ ŸáÿØ€åŸá ÿ™Ÿà ÿ®⁄Ø€åÿ±!!:\n{money_link}\n\n"
            f"ÿ®ÿß Ÿáÿ± ÿØÿπŸàÿ™ ŸÖŸàŸÅŸÇ 250 ÿ™ŸàŸÖÿßŸÜ ÿØÿ±€åÿßŸÅÿ™ ŸÖ€å‚Äå⁄©ŸÜ€åÿØ.\n"
            f"ÿ≠ÿØÿßŸÇŸÑ ÿ®ÿ±ÿØÿßÿ¥ÿ™ 1,250 ÿ™ŸàŸÖÿßŸÜ.\n"
            f"ŸÖŸàÿ¨ŸàÿØ€å ÿ¥ŸÖÿß ÿ®ÿ±ÿß€å Ÿæÿß⁄©ÿ™ ŸáÿØ€åŸá : {balance} ÿ™ŸàŸÖÿßŸÜ{withdraw_text}")

    bot.edit_message_text(text, user_id, call.message.message_id, reply_markup=inline_kb)

@bot.callback_query_handler(func=lambda call: call.data == "disconnect_waiting" and call.message.chat.type == "private")
def disconnect_callback(call):
    user_id = call.from_user.id
    if not (is_in_active_chat(user_id) or is_user_in_waiting(user_id)):
        bot.edit_message_text("ÿ®ÿßÿ¥", chat_id=user_id, message_id=call.message.message_id)
        return
        
    if is_in_active_chat(user_id):
            bot.edit_message_text("ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿáÿ≥ÿ™€åÿØ. ÿßÿ®ÿ™ÿØÿß ⁄Üÿ™ ŸÅÿπŸÑ€å ÿ±ÿß ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿØŸá€åÿØ.", chat_id=user_id, message_id=call.message.message_id,
                          reply_markup=get_reply_confirm_keyboard())
            return
    with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('DELETE FROM waiting_users WHERE user_id = ?', (user_id,))
            conn.commit()
            conn.close()
            bot.edit_message_text("ÿßÿ≤ ÿ≠ÿßŸÑÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿÆÿßÿ±ÿ¨ ÿ¥ÿØ€åÿØ.",user_id,call.message.message_id,reply_markup=get_inline_main_menu())

@bot.callback_query_handler(func=lambda call: call.data == "disconnect_chat" and call.message.chat.type == "private")
def disconnect_chat(call):
    user_id = call.from_user.id
    bot.edit_message_text("ÿ¢€åÿß ŸÖÿ∑ŸÖÿ¶ŸÜ Ÿáÿ≥ÿ™€åÿØ ⁄©Ÿá ŸÖ€å‚ÄåÿÆŸàÿßŸá€åÿØ ⁄Üÿ™ ÿ±ÿß ŸÇÿ∑ÿπ ⁄©ŸÜ€åÿØÿü", 
                              chat_id=user_id, 
                              message_id=call.message.message_id,
                              reply_markup=get_reply_confirm_keyboard())
    
@bot.callback_query_handler(func=lambda call: call.data == "cancel_stop" and call.message.chat.type == "private")
def cancel_stop(call):
    user_id = call.from_user.id
    bot.edit_message_text("ŸÖŸÜŸà€å ⁄Üÿ™ ŸÅÿπÿßŸÑ:", chat_id=user_id, message_id=call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data == "bleck" and call.message.chat.type == "private")
def bleck1(call):
    user_id = call.from_user.id
    try:
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT partner_id FROM last_chat WHERE user_id = ?', (user_id,))
            last = cursor.fetchone()
            partner_id = last[0]
            cursor.execute('INSERT OR REPLACE INTO blocked_users (blocker_id, blocked_id) VALUES (?, ?)', (user_id, partner_id))
            conn.commit()
            bot.edit_message_text("⁄©ÿßÿ±ÿ®ÿ± ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ®ŸÑÿß⁄© ÿ¥ÿØ. ÿßÿ≤ ÿß€åŸÜ Ÿæÿ≥ ÿØ€å⁄Øÿ± ÿ®ÿß ÿßŸà ÿ¨ŸÅÿ™ ŸÜÿÆŸàÿßŸá€åÿØ ÿ¥ÿØ.", chat_id=user_id, message_id=call.message.message_id, reply_markup=get_inline_main_menu())
    except:
        bot.edit_message_text("⁄©ÿßÿ±ÿ®ÿ± ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ®ŸÑÿß⁄© ÿ¥ÿØ. ÿßÿ≤ ÿß€åŸÜ Ÿæÿ≥ ÿØ€å⁄Øÿ± ÿ®ÿß ÿßŸà ÿ¨ŸÅÿ™ ŸÜÿÆŸàÿßŸá€åÿØ ÿ¥ÿØ.", chat_id=user_id, message_id=call.message.message_id, reply_markup=get_inline_main_menu())     
          
@bot.callback_query_handler(func=lambda call: call.data == "report" and call.message.chat.type == "private")
def report1(call):
    user_id = call.from_user.id
    try:
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT partner_id FROM last_chat WHERE user_id = ?', (user_id,))
            last = cursor.fetchone()

            if not last:
                bot.edit_message_text("⁄Üÿ™ ŸÅÿπÿßŸÑ€å ÿ®ÿ±ÿß€å ⁄Øÿ≤ÿßÿ±ÿ¥ Ÿæ€åÿØÿß ŸÜÿ¥ÿØ.", chat_id=user_id, message_id=call.message.message_id)
                return

            partner_id = last[0]

            cursor.execute('''
                CREATE TABLE IF NOT EXISTS reports (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    reporter_id INTEGER,
                    reported_id INTEGER,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            cursor.execute('INSERT INTO reports (reporter_id, reported_id) VALUES (?, ?)', (user_id, partner_id))

            cursor.execute('SELECT COUNT(*) FROM reports WHERE reported_id = ?', (partner_id,))
            count = cursor.fetchone()[0]
            conn.commit()
            conn.close()

            report_text = f"üì© ⁄Øÿ≤ÿßÿ±ÿ¥: ⁄©ÿßÿ±ÿ®ÿ± {user_id}ÿå ⁄©ÿßÿ±ÿ®ÿ± {partner_id} ÿ±ÿß ⁄Øÿ≤ÿßÿ±ÿ¥ ⁄©ÿ±ÿØŸá ÿßÿ≥ÿ™. (ÿ™ÿπÿØÿßÿØ ⁄©ŸÑ ⁄Øÿ≤ÿßÿ±ÿ¥‚ÄåŸáÿß: {count})"
            bot.send_message(574928595, report_text)

            if count >= 5:
                bot.send_message(574928595, f"‚ö†Ô∏è Ÿáÿ¥ÿØÿßÿ±: ⁄©ÿßÿ±ÿ®ÿ± {partner_id} ÿ®€åÿ¥ ÿßÿ≤ €µ ÿ®ÿßÿ± ⁄Øÿ≤ÿßÿ±ÿ¥ ÿ¥ÿØŸá ÿßÿ≥ÿ™!")

            bot.edit_message_text("‚úÖ ⁄Øÿ≤ÿßÿ±ÿ¥ ÿ¥ŸÖÿß ÿ®Ÿá ŸÖÿØ€åÿ±€åÿ™ ÿßÿ±ÿ≥ÿßŸÑ ÿ¥ÿØ.", chat_id=user_id, message_id=call.message.message_id, reply_markup=get_inline_main_menu())

    except Exception as e:
        print("Report Error:", e)
        bot.edit_message_text("⁄Øÿ≤ÿßÿ±ÿ¥ ÿ¥ŸÖÿß ÿ´ÿ®ÿ™ ŸÜÿ¥ÿØ.  ÿØŸàÿ®ÿßÿ±Ÿá ÿ™ŸÑÿßÿ¥ ⁄©ŸÜ€åÿØ.", chat_id=user_id, message_id=call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data == "nthing" and call.message.chat.type == "private")
def nthing1(call):
    user_id = call.from_user.id
    bot.edit_message_text("ŸÖŸÜŸà€å ÿßÿµŸÑ€å", chat_id=user_id, message_id=call.message.message_id, reply_markup=get_inline_main_menu())       
# -- ÿßÿ∂ÿßŸÅŸá€å....
def is_user_in_waiting(user_id):
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT 1 FROM waiting_users WHERE user_id = ?', (user_id,))
        exists = cursor.fetchone() is not None
        conn.close()
    return exists

link_pattern = re.compile(
    r'((?:https?|ftp):\/\/[^\s/$.?#].[^\s]*)|'    
    r'((?:www\.)[^\s/$.?#].[^\s]*)|'              
    r'(\b(?:[a-z0-9-]+\.)+(?:com|net|org|ir|info|biz|edu|gov|co|io|ai)\b)', 
    re.IGNORECASE
)

@bot.message_handler(content_types=['text'],chat_types=["private"])
def relay_message(message):
    user_id = message.chat.id
    if message.text == "admin":
        admin_panel(message)
        return
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT partner_id FROM active_chats WHERE user_id = ?', (user_id,))
        row = cursor.fetchone()
        conn.close()
    if message.text and link_pattern.search(message.text):
                bot.send_message(message.chat.id, "ÿßÿ±ÿ≥ÿßŸÑ ŸÑ€åŸÜ⁄© ŸÖÿ¨ÿßÿ≤ ŸÜ€åÿ≥ÿ™!")
                return
    if row:
        partner_id = row[0]
        try:
            bot.send_message(partner_id, message.text)
        except Exception as e:
            bot.send_message(user_id, "ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ± ŸÖŸÇÿßÿ®ŸÑ.")

# -- Ÿæ€åÿßŸÖ 
@bot.message_handler(content_types=['photo', 'video', 'animation', 'document', 'audio', 'voice', 'sticker'],chat_types=["private"])
def relay_media(message):
    user_id = message.chat.id   
    if message.caption and link_pattern.search(message.caption):
        bot.send_message(message.chat.id, "ÿßÿ±ÿ≥ÿßŸÑ ŸÑ€åŸÜ⁄© ŸÖÿ¨ÿßÿ≤ ŸÜ€åÿ≥ÿ™!")
        return
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT partner_id FROM active_chats WHERE user_id = ?', (user_id,))
        row = cursor.fetchone()
        conn.close()
    if row:
        partner_id = row[0]
        try:
            if message.content_type == 'photo':
                bot.send_photo(partner_id, message.photo[-1].file_id, caption=message.caption)
            elif message.content_type == 'video':
                bot.send_video(partner_id, message.video.file_id, caption=message.caption)
            elif message.content_type == 'animation':
                bot.send_animation(partner_id, message.animation.file_id, caption=message.caption)
            elif message.content_type == 'sticker':
                bot.send_sticker(partner_id, message.sticker.file_id)
            elif message.content_type == 'document':
                if message.document.mime_type == 'image/gif':
                    bot.send_animation(partner_id, message.document.file_id, caption=message.caption)
                else:
                    bot.send_document(partner_id, message.document.file_id, caption=message.caption)
                    
            elif message.content_type == 'audio':
                bot.send_audio(partner_id, message.audio.file_id, caption=message.caption)
            elif message.content_type == 'voice':
                bot.send_voice(partner_id, message.voice.file_id, caption=message.caption)
        except Exception as e:
            bot.send_message(user_id, "ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ ÿ±ÿ≥ÿßŸÜŸá ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ± ŸÖŸÇÿßÿ®ŸÑ.")
# -- Ÿæ€åÿßŸÖ 2
def anonymous_send_handler(user_id, link_id):
    add_new_user(user_id)
    if is_user_in_waiting(user_id): 
        bot.send_message(user_id,"ÿ¥ŸÖÿß ÿßÿ®ÿ™ÿØÿß ÿ®ÿß€åÿØ ÿ≠ÿßŸÑÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ±ÿß ŸÑÿ∫Ÿà ⁄©ŸÜ€åÿØ ÿ≥Ÿæÿ≥",reply_markup=get_inline_waiting_menu())
        return
    if is_in_active_chat(user_id):
        bot.send_message(user_id,"ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿáÿ≥ÿ™€åÿØ. ÿßÿ®ÿ™ÿØÿß ⁄Üÿ™ ŸÅÿπŸÑ€å ÿ±ÿß ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿØŸá€åÿØ.",
                          reply_markup=get_reply_confirm_keyboard())
        return
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM anonymous_links WHERE link_id = ?', (link_id,))
        row = cursor.fetchone()
        conn.close()
    if not row:
        bot.send_message(user_id, " ŸÑ€åŸÜ⁄© ŸÜÿßŸÖÿπÿ™ÿ®ÿ± ÿßÿ≥ÿ™!")
        return


    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    cancel_button = types.KeyboardButton("ŸÑÿ∫Ÿà")
    markup.add(cancel_button)

   
    prompt_msg = bot.send_message(user_id, " Ÿæ€åÿßŸÖ ÿÆŸàÿØ (ŸÖÿ™ŸÜ €åÿß ÿ±ÿ≥ÿßŸÜŸá) ÿ±ÿß ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜ€åÿØ:", reply_markup=markup)


    bot.register_next_step_handler(prompt_msg, process_anonymous_message, link_id=link_id)


def process_anonymous_message(message, link_id):
    user_id = message.chat.id

    if message.text == "ŸÑÿ∫Ÿà":
        bot.send_message(user_id, " ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ ŸÑÿ∫Ÿà ÿ¥ÿØ.", reply_markup=get_inline_main_menu())
        return

    content_type = message.content_type
    forwarded = False  

    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM anonymous_links WHERE link_id = ?', (link_id,))
        row = cursor.fetchone()
        conn.close()
    if not row:
        bot.send_message(user_id, " ŸÑ€åŸÜ⁄© ŸÜÿßŸÖÿπÿ™ÿ®ÿ± ÿßÿ≥ÿ™!")
        return
    target_user = row[0]

    try:
        if content_type == 'text':
            anon_text = message.text.strip()
            if not anon_text:
                bot.send_message(user_id, "ŸÖÿ™ŸÜ Ÿæ€åÿßŸÖ ÿÆÿßŸÑ€å ÿßÿ≥ÿ™!", reply_markup=get_inline_main_menu())
                return
            bot.send_message(target_user, f"üì© Ÿæ€åÿßŸÖ ŸÜÿßÿ¥ŸÜÿßÿ≥:\n\n{anon_text}")
            forwarded = True

        elif content_type == 'photo':
            caption = message.caption if message.caption else ""
            bot.send_photo(target_user, message.photo[-1].file_id, caption=f"üì© Ÿæ€åÿßŸÖ ŸÜÿßÿ¥ŸÜÿßÿ≥:\n\n{caption}")
            forwarded = True

        elif content_type == 'video':
            caption = message.caption if message.caption else ""
            bot.send_video(target_user, message.video.file_id, caption=f"üì© Ÿæ€åÿßŸÖ ŸÜÿßÿ¥ŸÜÿßÿ≥:\n\n{caption}")
            forwarded = True

        elif content_type == 'animation':
            caption = message.caption if message.caption else ""
            bot.send_animation(target_user, message.animation.file_id, caption=f"üì© Ÿæ€åÿßŸÖ ŸÜÿßÿ¥ŸÜÿßÿ≥:\n\n{caption}")
            forwarded = True

        elif content_type == 'document':
            
            if message.document.mime_type == 'gif':
                caption = message.caption if message.caption else ""
                bot.send_animation(target_user, message.document.file_id, caption=f"üì© Ÿæ€åÿßŸÖ ŸÜÿßÿ¥ŸÜÿßÿ≥:\n\n{caption}")
            else:
                caption = message.caption if message.caption else ""
                bot.send_document(target_user, message.document.file_id, caption=f"üì© Ÿæ€åÿßŸÖ ŸÜÿßÿ¥ŸÜÿßÿ≥:\n\n{caption}")
            forwarded = True

        elif content_type == 'sticker':
            bot.send_sticker(target_user, message.sticker.file_id)
            forwarded = True

        elif content_type == 'audio':
            caption = message.caption if message.caption else ""
            bot.send_audio(target_user, message.audio.file_id, caption=f"üì© Ÿæ€åÿßŸÖ ŸÜÿßÿ¥ŸÜÿßÿ≥:\n\n{caption}")
            forwarded = True

        elif content_type == 'voice':
            caption = message.caption if message.caption else ""
            bot.send_voice(target_user, message.voice.file_id, caption=f"üì© Ÿæ€åÿßŸÖ ŸÜÿßÿ¥ŸÜÿßÿ≥:\n\n{caption}")
            forwarded = True

        else:
            bot.send_message(user_id, "ŸÅÿ±ŸÖÿ™ ÿß€åŸÜ Ÿæ€åÿßŸÖ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ŸÜŸÖ€å‚Äåÿ¥ŸàÿØ.", reply_markup=get_inline_main_menu())
            return

    except Exception as e:
        bot.send_message(user_id, "ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ ŸÜÿßÿ¥ŸÜÿßÿ≥ ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ± ŸÖŸÇÿßÿ®ŸÑ.")
        return

    if forwarded:
        bot.send_message(user_id, "‚úÖ Ÿæ€åÿßŸÖ ÿ¥ŸÖÿß ÿßÿ±ÿ≥ÿßŸÑ ÿ¥ÿØ!", reply_markup=get_inline_main_menu())

# -- ÿ±ŸÅÿßŸÑ 
def referral_handler(user_id,referral_code):
    add_new_user(user_id)
    if is_user_in_waiting(user_id):
        bot.send_message(user_id,"ÿ¥ŸÖÿß ÿßÿ®ÿ™ÿØÿß ÿ®ÿß€åÿØ ÿ≠ÿßŸÑÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ±ÿß ŸÑÿ∫Ÿà ⁄©ŸÜ€åÿØ ÿ≥Ÿæÿ≥",reply_markup=get_inline_waiting_menu())
        return
    if is_in_active_chat(user_id):
        bot.send_message(user_id,"ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿáÿ≥ÿ™€åÿØ. ÿßÿ®ÿ™ÿØÿß ⁄Üÿ™ ŸÅÿπŸÑ€å ÿ±ÿß ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿØŸá€åÿØ.",
                          reply_markup=get_reply_confirm_keyboard())
        return
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM referral_links WHERE referral_code = ?', (referral_code,))
        row = cursor.fetchone()
        if row and row[0] != user_id:
            cursor.execute('SELECT 1 FROM used_referrals WHERE user_id = ? AND referral_code = ?', (user_id, referral_code))
            if not cursor.fetchone():
                cursor.execute('INSERT INTO used_referrals (user_id, referral_code) VALUES (?, ?)', (user_id, referral_code))
                cursor.execute('UPDATE users SET coin_balance = coin_balance + 2 WHERE user_id = ?', (row[0],))
                cursor.execute('DELETE FROM pending_referrals WHERE user_id = ?', (user_id,))
                conn.commit()
                bot.send_message(user_id, "‚úÖ 2 ÿ≥⁄©Ÿá ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ± ÿØÿπŸàÿ™‚Äå⁄©ŸÜŸÜÿØŸá ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ.", reply_markup=get_inline_main_menu())
            else:
                bot.send_message(user_id, "ÿ¥ŸÖÿß ŸÇÿ®ŸÑÿßŸã ÿßÿ≤ ÿß€åŸÜ ⁄©ÿØ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ÿ±ÿØŸá‚Äåÿß€åÿØ.")
        else:
            bot.send_message(user_id, "⁄©ÿØ ÿ±ŸÅÿ±ÿßŸÑ ŸÜÿßŸÖÿπÿ™ÿ®ÿ± ÿßÿ≥ÿ™.", reply_markup=get_inline_main_menu())
        conn.close()

# -- ŸæŸàŸÑ ŸáŸÜÿØŸÑ
def money_referral_handler(user_id, referral_code):
    add_new_user(user_id)
    bot_bank = get_bot_inventory()
    if bot_bank == 0:
        bot.send_message(user_id,"ŸÖŸàÿ¨ŸàÿØ€å ÿ®ÿßÿ™ ⁄©ÿßŸÅ€å ŸÜ€åÿ≥ÿ™ €åÿß ÿß€åŸÜ ÿ®ÿÆÿ¥ ÿ∫€åÿ±ŸÅÿπÿßŸÑ ŸÖ€å ÿ®ÿßÿ¥ÿØ.")
        return
    bot.send_message(user_id, "ÿØÿ± ÿ≠ÿßŸÑ Ÿæÿ±ÿØÿßÿ≤ÿ¥ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ ÿØÿπŸàÿ™ ŸÖÿßŸÑ€å ...")
    
    if is_user_in_waiting(user_id):  
        bot.send_message(user_id, "ÿ¥ŸÖÿß ÿßÿ®ÿ™ÿØÿß ÿ®ÿß€åÿØ ÿ≠ÿßŸÑÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ±ÿß ŸÑÿ∫Ÿà ⁄©ŸÜ€åÿØ ÿ≥Ÿæÿ≥",reply_markup=get_inline_waiting_menu())
        return
    if is_in_active_chat(user_id):
        bot.send_message(user_id, "ÿ¥ŸÖÿß ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿáÿ≥ÿ™€åÿØ. ÿßÿ®ÿ™ÿØÿß ⁄Üÿ™ ŸÅÿπŸÑ€å ÿ±ÿß ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿØŸá€åÿØ.",
                         reply_markup=get_reply_confirm_keyboard())
        return

    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT 1 FROM used_money_referrals WHERE user_id = ?', (user_id,))
            if cursor.fetchone():
                bot.send_message(user_id, "ÿ¥ŸÖÿß ŸÇÿ®ŸÑÿßŸã ÿßÿ≤ ÿß€åŸÜ ⁄©ÿØ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ÿ±ÿØŸá‚Äåÿß€åÿØ.", reply_markup=get_inline_main_menu())
                return

            cursor.execute('SELECT balance FROM bot_inventory WHERE id = 1')
            row = cursor.fetchone()

            if row is None:
                    cursor.execute('INSERT INTO bot_inventory (id, balance) VALUES (1, 100000)')
                    current_balance = 100000
            else:
                    current_balance = row[0]

            if current_balance < 250:
                    print(" ŸÖŸàÿ¨ŸàÿØ€å ⁄©ÿßŸÅ€å ŸÜ€åÿ≥ÿ™")
                    return False

            new_balance = current_balance - 250
            cursor.execute('UPDATE bot_inventory SET balance = ? WHERE id = 1', (new_balance,))

            print(f"‚úÖ ŸÖŸàÿ¨ŸàÿØ€å ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ¥ÿØ. ŸÖŸàÿ¨ŸàÿØ€å ÿ¨ÿØ€åÿØ: {new_balance}")

            cursor.execute('SELECT user_id FROM money_referral_links WHERE referral_code = ?', (referral_code,))
            row = cursor.fetchone()
            if row:
                referrer_id = row[0]
                if referrer_id == user_id:
                    bot.send_message(user_id, "ÿ¥ŸÖÿß ŸÜŸÖ€åÿ™ŸàÿßŸÜ€åÿØ ÿßÿ≤ ŸÑ€åŸÜ⁄© ÿÆŸàÿØ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ.")
                    return
                
                cursor.execute('UPDATE users SET balance = balance + 250 WHERE user_id = ?', (referrer_id,))
                cursor.execute('INSERT INTO used_money_referrals (user_id, referral_code) VALUES (?, ?)', (user_id, referral_code))
                conn.commit()

                log_text = (
                    f"üì• ÿØÿπŸàÿ™ ÿ¨ÿØ€åÿØ!\n"
                    f"‚Ä¢ ⁄©ÿßÿ±ÿ®ÿ± ÿØÿπŸàÿ™‚Äå⁄©ŸÜŸÜÿØŸá: {referrer_id}\n"
                    f"‚Ä¢ ⁄©ÿßÿ±ÿ®ÿ± ÿØÿπŸàÿ™‚Äåÿ¥ÿØŸá: {user_id}\n"
                    f"‚Ä¢ ⁄©ÿØ ÿ±ŸÅÿ±ÿßŸÑ: {referral_code}\n"
                    f"‚Ä¢ ŸÖÿ®ŸÑÿ∫ ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØŸá: 250 ÿ™ŸàŸÖÿßŸÜ"
                )
                bot.send_message(574928595, log_text)  # ÿ¢€åÿØ€å ÿßÿØŸÖ€åŸÜ

                cursor.execute('''
                    INSERT INTO admin_logs (admin_id, action, details)
                    VALUES (?, ?, ?)
                ''', (574928595, "ÿØÿπŸàÿ™ ŸÖÿßŸÑ€å", log_text))
                conn.commit()
                bot.send_message(user_id, "‚úÖ ÿØÿπŸàÿ™ ÿ¥ŸÖÿß ÿ´ÿ®ÿ™ ÿ¥ÿØ! 250 ÿ™ŸàŸÖÿßŸÜ ÿ®Ÿá ÿ≠ÿ≥ÿßÿ® ÿØÿπŸàÿ™‚Äå⁄©ŸÜŸÜÿØŸá ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ.", reply_markup=get_inline_main_menu())
                bot.send_message(referrer_id, "üéâ €å⁄© ⁄©ÿßÿ±ÿ®ÿ± ÿ®ÿß ŸÑ€åŸÜ⁄© ÿØÿπŸàÿ™ ÿ¥ŸÖÿß Ÿàÿßÿ±ÿØ ÿ¥ÿØ Ÿà 250 ÿ™ŸàŸÖÿßŸÜ ÿØÿ±€åÿßŸÅÿ™ ⁄©ÿ±ÿØ€åÿØ!")
            else:
                bot.send_message(user_id, " ŸÑ€åŸÜ⁄© ŸÜÿßŸÖÿπÿ™ÿ®ÿ± ÿßÿ≥ÿ™!")
        
        except Exception as e:
            conn.rollback()
            bot.send_message(user_id, " ÿÆÿ∑ÿß ÿØÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™!")
            print(f"ÿÆÿ∑ÿß ÿØÿ± money_referral_handler: {e}")
        
        finally:
            conn.close()
# -- ÿßÿØŸÖ€åŸÜ
def admin_panel(message):
    if message.from_user.id not in ADMIN_IDS:
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(" ÿßŸÅÿ≤ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å ÿ±ÿ®ÿßÿ™", callback_data="admin_add_bot_inventory"),
        types.InlineKeyboardButton(" ⁄©ÿßŸáÿ¥ ŸÖŸàÿ¨ŸàÿØ€å ÿ±ÿ®ÿßÿ™", callback_data="admin_reduce_bot_inventory")
    )
    markup.add(
        types.InlineKeyboardButton(" ÿßŸÅÿ≤ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å", callback_data="admin_add_balance"),
        types.InlineKeyboardButton(" ⁄©ÿßŸáÿ¥ ŸÖŸàÿ¨ŸàÿØ€å", callback_data="admin_reduce_balance")
    )
    markup.add(
        types.InlineKeyboardButton("ÿßŸÅÿ≤ÿß€åÿ¥ ÿ≥⁄©Ÿá", callback_data="admin_add_coins"),
        types.InlineKeyboardButton("⁄©ÿßŸáÿ¥ ÿ≥⁄©Ÿá", callback_data="admin_reduce_coins")
    )
    markup.add(
        types.InlineKeyboardButton("ŸÜŸÖÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å ÿ±ÿ®ÿßÿ™", callback_data="admin_bot_inventory")
    )
    markup.add(
        types.InlineKeyboardButton("ŸÖÿØ€åÿ±€åÿ™ ŸáÿØÿß€åÿß", callback_data="admin_gifts"),
        types.InlineKeyboardButton("ÿßÿ∂ÿßŸÅŸá ⁄©ÿ±ÿØŸÜ ŸáÿØ€åŸá", callback_data="admin_add_gift")
    )
    markup.add(
        types.InlineKeyboardButton("ÿ®ŸÜ ⁄©ÿ±ÿØŸÜ ⁄©ÿßÿ±ÿ®ÿ±", callback_data="admin_ban_user"),
        types.InlineKeyboardButton("ÿ±ŸÅÿπ ÿ®ŸÜ", callback_data="admin_unban_user")
    )
    markup.add(
        types.InlineKeyboardButton("ŸÖÿØ€åÿ±€åÿ™ ÿ±ŸÅÿ±ÿßŸÑ‚ÄåŸáÿß", callback_data="admin_referrals"),
        types.InlineKeyboardButton(" ÿßÿ±ÿ≥ÿßŸÑ ÿ≥⁄©Ÿá ÿ®Ÿá ŸáŸÖŸá", callback_data="broadcast_coins")
    )
    markup.add(
        types.InlineKeyboardButton("ÿ¨ÿ≥ÿ™ÿ¨Ÿà€å ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ", callback_data="admin_get_user_full_info"),
        types.InlineKeyboardButton("ŸÖÿ¥ÿßŸáÿØŸá ŸÑÿß⁄Ø‚ÄåŸáÿß", callback_data="admin_view_logs")
    )
    markup.add(
        types.InlineKeyboardButton("ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ ŸáŸÖŸá‚Äå⁄ØÿßŸÜ€å", callback_data="admin_broadcast"),
        types.InlineKeyboardButton("ŸÇÿ∑ÿπ ⁄Üÿ™ ⁄©ÿßÿ±ÿ®ÿ±", callback_data="admin_disconnect_chat")
    )
    markup.add(
        types.InlineKeyboardButton("ÿØÿßÿ¥ÿ®Ÿàÿ±ÿØ ÿ¢ŸÖÿßÿ±€å", callback_data="admin_dashboard"),
        types.InlineKeyboardButton(" ŸÇÿ∑ÿπ ÿ™ŸÖÿßŸÖ ⁄Üÿ™‚ÄåŸáÿß€å ŸÅÿπÿßŸÑ", callback_data="admin_disconnect_all_chats")
    )
    markup.add(
    types.InlineKeyboardButton("üì° ŸÖÿØ€åÿ±€åÿ™ ⁄©ÿßŸÜÿßŸÑ‚ÄåŸáÿß", callback_data="admin_manage_channels")
    )
    bot.send_message(message.chat.id, "ÿ®Ÿá ÿ®ÿÆÿ¥ ÿßÿØŸÖ€åŸÜ ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€åÿØ. €å⁄© ⁄Øÿ≤€åŸÜŸá ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "admin_disconnect_all_chats")
def disconnect_all_chats(call):
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT user_id, partner_id FROM active_chats')
        active_pairs = cursor.fetchall()

        disconnected_count = 0

        for user_id, partner_id in active_pairs:
            try:
                cursor.execute('DELETE FROM active_chats WHERE user_id = ?', (user_id,))
                cursor.execute('DELETE FROM active_chats WHERE user_id = ?', (partner_id,))

                bot.send_message(user_id, "⁄Üÿ™ ÿ¥ŸÖÿß ÿ™Ÿàÿ≥ÿ∑ ŸÖÿØ€åÿ±€åÿ™ ŸÇÿ∑ÿπ ÿ¥ÿØ.", reply_markup=get_inline_main_menu())
                bot.send_message(partner_id, "⁄Üÿ™ ÿ¥ŸÖÿß ÿ™Ÿàÿ≥ÿ∑ ŸÖÿØ€åÿ±€åÿ™ ŸÇÿ∑ÿπ ÿ¥ÿØ.", reply_markup=get_inline_main_menu())
                disconnected_count += 1
            except Exception as e:
                print(f"ÿÆÿ∑ÿß ÿØÿ± ŸÇÿ∑ÿπ ⁄Üÿ™ ÿ®€åŸÜ {user_id} Ÿà {partner_id}: {e}")
        
        conn.commit()
        conn.close()

    return disconnected_count

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
def admin_callbacks(call):
    if call.data == "admin_dashboard":
        if call.from_user.id not in ADMIN_IDS:
            return
        admin_dashboard(call)
    elif call.data == "admin_add_channel":
        if call.from_user.id not in ADMIN_IDS:
            return
        start_add_channel(call.message) 
    elif call.data == "admin_list_channels":
        if call.from_user.id not in ADMIN_IDS:
            return
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id, title, chat_id, expire_at FROM channels")
        rows = cursor.fetchall()
        conn.close()

        if not rows:
            return bot.edit_message_text("‚ùóÔ∏èŸá€å⁄Ü ⁄©ÿßŸÜÿßŸÑ€å ÿ´ÿ®ÿ™ ŸÜÿ¥ÿØŸá ÿßÿ≥ÿ™.", call.message.chat.id, call.message.message_id)

        for row in rows:
            ch_id, title, chat_id, expire = row
            text = f"üì° <b>{title}</b>\nüÜî <code>{chat_id}</code>\n‚è∞ ÿßŸÜŸÇÿ∂ÿß: <code>{expire}</code>"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(" ÿ≠ÿ∞ŸÅ", callback_data=f"admin_delete_channel_{ch_id}"))
            bot.send_message(call.message.chat.id, text, reply_markup=markup, parse_mode="HTML")

    elif call.data.startswith("admin_delete_channel_"):
        if call.from_user.id not in ADMIN_IDS:
            return
        ch_id = int(call.data.split("_")[-1])
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM channels WHERE id = ?", (ch_id,))
        conn.commit()
        conn.close()
        bot.send_message(call.message.chat.id, "‚úÖ ⁄©ÿßŸÜÿßŸÑ ÿ≠ÿ∞ŸÅ ÿ¥ÿØ.")
        bot.delete_message(call.message.chat.id, call.message.message_id)

    elif call.data == "admin_manage_channels":
        if call.from_user.id not in ADMIN_IDS:
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚ûï ÿßŸÅÿ≤ŸàÿØŸÜ ⁄©ÿßŸÜÿßŸÑ", callback_data="admin_add_channel"),
            types.InlineKeyboardButton("üìÉ ŸÑ€åÿ≥ÿ™ ⁄©ÿßŸÜÿßŸÑ‚ÄåŸáÿß", callback_data="admin_list_channels")
        )
        bot.edit_message_text(" €å⁄©€å ÿßÿ≤ ⁄Øÿ≤€åŸÜŸá‚ÄåŸáÿß€å ŸÖÿØ€åÿ±€åÿ™ ⁄©ÿßŸÜÿßŸÑ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:", call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif call.data == "admin_add_coins":
        if call.from_user.id not in ADMIN_IDS:
            return
        msg = bot.send_message(call.message.chat.id, "ÿ¥ŸÜÿßÿ≥Ÿá ⁄©ÿßÿ±ÿ®ÿ± Ÿà ŸÖŸÇÿØÿßÿ± ÿ≥⁄©Ÿá ÿ®ÿ±ÿß€å ÿßŸÅÿ≤ÿß€åÿ¥ ÿ±ÿß ÿ®Ÿá ÿß€åŸÜ ÿµŸàÿ±ÿ™ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ: user_id amount")
        bot.register_next_step_handler(msg, add_coins)
    elif call.data == "admin_reduce_coins":
        if call.from_user.id not in ADMIN_IDS:
            return
        msg = bot.send_message(call.message.chat.id, "ÿ¥ŸÜÿßÿ≥Ÿá ⁄©ÿßÿ±ÿ®ÿ± Ÿà ŸÖŸÇÿØÿßÿ± ÿ≥⁄©Ÿá ÿ®ÿ±ÿß€å ⁄©ÿßŸáÿ¥ ÿ±ÿß ÿ®Ÿá ÿß€åŸÜ ÿµŸàÿ±ÿ™ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ: user_id amount")
        bot.register_next_step_handler(msg, reduce_coins)
    elif call.data == "admin_bot_inventory":
        if call.from_user.id not in ADMIN_IDS:
            return
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT balance FROM bot_inventory WHERE id = 1")
        row = cursor.fetchone()
        conn.close()
        balance = row[0] if row else 0
        bot.edit_message_text(f"ŸÖŸàÿ¨ŸàÿØ€å ÿ±ÿ®ÿßÿ™: {balance}", call.message.chat.id, call.message.message_id)
    elif call.data == "admin_gifts":
        if call.from_user.id not in ADMIN_IDS:
            return
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id, gift, created_at FROM gifts")
        rows = cursor.fetchall()
        conn.close()
        if rows:
            text = "ŸÑ€åÿ≥ÿ™ ŸáÿØÿß€åÿß:\n"
            for gift_id, gift, created_at in rows:
                text += f"- ÿ¥ŸÜÿßÿ≥Ÿá: {gift_id} | ŸáÿØ€åŸá: {gift} - ÿ™ÿßÿ±€åÿÆ: {created_at}\n"
        else:
            text = "Ÿá€å⁄Ü ŸáÿØ€åŸá‚Äåÿß€å ÿ´ÿ®ÿ™ ŸÜÿ¥ÿØŸá ÿßÿ≥ÿ™."
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
    elif call.data == "admin_add_gift":
        if call.from_user.id not in ADMIN_IDS:
            return
        msg = bot.send_message(call.message.chat.id, " ⁄©ÿØ ŸáÿØ€åŸá ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:")
        bot.register_next_step_handler(msg, admin_add_gift)
    elif call.data == "admin_ban_user":
        if call.from_user.id not in ADMIN_IDS:
            return
        msg = bot.send_message(call.message.chat.id, "ÿ¥ŸÜÿßÿ≥Ÿá ⁄©ÿßÿ±ÿ®ÿ± ÿ®ÿ±ÿß€å ÿ®ŸÜ ⁄©ÿ±ÿØŸÜ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:")
        bot.register_next_step_handler(msg, ban_user)
    elif call.data == "admin_unban_user":
        if call.from_user.id not in ADMIN_IDS:
            return
        msg = bot.send_message(call.message.chat.id, "ÿ¥ŸÜÿßÿ≥Ÿá ⁄©ÿßÿ±ÿ®ÿ± ÿ®ÿ±ÿß€å ÿ±ŸÅÿπ ÿ®ŸÜ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:")
        bot.register_next_step_handler(msg, admin_unban_user)
    elif call.data == "admin_get_user_full_info":
        if call.from_user.id not in ADMIN_IDS:
            return
        msg = bot.send_message(call.message.chat.id, "ŸÅ€åŸÑÿ™ÿ± ÿ¨ÿ≥ÿ™ÿ¨Ÿà ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ (ŸÖÿ´ÿßŸÑ: user_id:12345 €åÿß balance:>1000 €åÿß gender:ŸÖÿ±ÿØ):")
        bot.register_next_step_handler(msg, admin_get_user_full_info)
    elif call.data == "admin_broadcast":
        if call.from_user.id not in ADMIN_IDS:
            return
        msg = bot.send_message(call.message.chat.id, "Ÿæ€åÿßŸÖ ÿ®ÿ±ÿß€å ÿßÿ±ÿ≥ÿßŸÑ ÿ®Ÿá ŸáŸÖŸá ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:")
        bot.register_next_step_handler(msg, broadcast_message)
    elif call.data == "admin_disconnect_chat":
        if call.from_user.id not in ADMIN_IDS:
            return
        msg = bot.send_message(call.message.chat.id, "ÿ¥ŸÜÿßÿ≥Ÿá ⁄©ÿßÿ±ÿ®ÿ± ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ®ÿ±ÿß€å ŸÇÿ∑ÿπ ⁄Üÿ™ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:")
        bot.register_next_step_handler(msg, admin_disconnect_chat)
    elif call.data == "admin_view_logs":
        if call.from_user.id not in ADMIN_IDS:
            return
        admin_view_logs(call)
    elif call.data.startswith("admin_referrals"):
        if call.from_user.id not in ADMIN_IDS:
            return
        admin_referrals_handler(call)
    elif call.data == "admin_add_balance":
        if call.from_user.id not in ADMIN_IDS:
            return
        msg = bot.send_message(call.message.chat.id, "ÿ¥ŸÜÿßÿ≥Ÿá ⁄©ÿßÿ±ÿ®ÿ± Ÿà ŸÖÿ®ŸÑÿ∫ ÿßŸÅÿ≤ÿß€åÿ¥ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ (ŸÅÿ±ŸÖÿ™: user_id amount):")
        bot.register_next_step_handler(msg, process_add_balance)
    elif call.data == "admin_reduce_balance":
        if call.from_user.id not in ADMIN_IDS:
            return
        msg = bot.send_message(call.message.chat.id, "ÿ¥ŸÜÿßÿ≥Ÿá ⁄©ÿßÿ±ÿ®ÿ± Ÿà ŸÖÿ®ŸÑÿ∫ ⁄©ÿßŸáÿ¥ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ (ŸÅÿ±ŸÖÿ™: user_id amount):")
        bot.register_next_step_handler(msg, process_reduce_balance)
    elif call.data == "admin_add_bot_inventory":
        if call.from_user.id not in ADMIN_IDS:
            return
        msg = bot.send_message(call.message.chat.id, "ŸÖÿ®ŸÑÿ∫ ÿßŸÅÿ≤ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å ÿ±ÿ®ÿßÿ™ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:")
        bot.register_next_step_handler(msg, process_add_bot_inventory)
    elif call.data == "admin_reduce_bot_inventory":
        if call.from_user.id not in ADMIN_IDS:
            return
        msg = bot.send_message(call.message.chat.id, "ŸÖÿ®ŸÑÿ∫ ⁄©ÿßŸáÿ¥ ŸÖŸàÿ¨ŸàÿØ€å ÿ±ÿ®ÿßÿ™ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:")
        bot.register_next_step_handler(msg, process_reduce_bot_inventory)
    else:
        bot.send_message(call.message.chat.id, "⁄Øÿ≤€åŸÜŸá ŸÜÿßŸÖÿπÿ™ÿ®ÿ±!")

@bot.callback_query_handler(func=lambda call: call.data == "broadcast_coins")
def admin_broadcast_coins(call):
    if call.from_user.id not in ADMIN_IDS:
        return
    msg = bot.send_message(
        call.message.chat.id,
        "üí∞  ÿ™ÿπÿØÿßÿØ ÿ≥⁄©Ÿá ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ®ÿ±ÿß€å ÿßÿ±ÿ≥ÿßŸÑ ÿ®Ÿá ŸáŸÖŸá ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:",
        reply_markup=types.ForceReply(selective=True)
    )
    bot.register_next_step_handler(msg, process_broadcast_coins)

def process_broadcast_coins(message):
    try:
        admin_id = message.from_user.id
        amount = int(message.text.strip())
        
        if amount <= 0:
            bot.reply_to(message, " ŸÖŸÇÿØÿßÿ± ÿ®ÿß€åÿØ ÿ®ÿ≤ÿ±⁄Øÿ™ÿ± ÿßÿ≤ ÿµŸÅÿ± ÿ®ÿßÿ¥ÿØ!")
            return

        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM users")
            users = [row[0] for row in cursor.fetchall()]
            total_users = len(users)

        if total_users == 0:
            bot.reply_to(message, " Ÿá€å⁄Ü ⁄©ÿßÿ±ÿ®ÿ±€å ÿØÿ± ÿ≥€åÿ≥ÿ™ŸÖ ÿ´ÿ®ÿ™ ŸÜÿ¥ÿØŸá ÿßÿ≥ÿ™!")
            return

        progress_msg = bot.send_message(
            admin_id,
            f"üîÑ ÿ¥ÿ±Ÿàÿπ ŸÅÿ±ÿ¢€åŸÜÿØ ÿßÿ±ÿ≥ÿßŸÑ ÿ≥⁄©Ÿá...\n"
            f"‚Ä¢ ⁄©ŸÑ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {total_users}\n"
            f"‚Ä¢ ŸÖŸàŸÅŸÇ: 0\n"
            f"‚Ä¢ ŸÜÿßŸÖŸàŸÅŸÇ: 0\n"
            f"‚è≥ ÿ≤ŸÖÿßŸÜ ÿ≥Ÿæÿ±€å ÿ¥ÿØŸá: 0 ÿ´ÿßŸÜ€åŸá"
        )

        success = 0
        failed = 0
        start_time = time.time()
        batch_size = 50  

        for i in range(0, total_users, batch_size):
            batch = users[i:i + batch_size]
            
            with get_db_connection() as conn:
                cursor = conn.cursor()
                for user_id in batch:
                    try:

                        cursor.execute(
                            "UPDATE users SET coin_balance = coin_balance + ? WHERE user_id = ?",
                            (amount, user_id)
                        )

                        try:
                            bot.send_message(
                                user_id,
                                f"üéâ ÿØÿ±€åÿßŸÅÿ™ ÿ≥⁄©Ÿá ÿ±ÿß€å⁄ØÿßŸÜ!\n"
                                f"‚Ä¢ ÿ™ÿπÿØÿßÿØ ÿ≥⁄©Ÿá: {amount}\n"
                            )
                            success += 1
                        except Exception as e:
                            failed += 1
                            
                    except sqlite3.Error as e:
                        failed += 1
                        
                conn.commit()

            elapsed = int(time.time() - start_time)
            try:
                bot.edit_message_text(
                    f"üîÑ ÿØÿ± ÿ≠ÿßŸÑ Ÿæÿ±ÿØÿßÿ≤ÿ¥...\n"
                    f"‚Ä¢ ⁄©ŸÑ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {total_users}\n"
                    f"‚Ä¢ Ÿæÿ±ÿØÿßÿ≤ÿ¥ ÿ¥ÿØŸá: {min(i + batch_size, total_users)}\n"
                    f"‚Ä¢ ŸÖŸàŸÅŸÇ: {success}\n"
                    f"‚Ä¢ ŸÜÿßŸÖŸàŸÅŸÇ: {failed}\n"
                    f"‚è≥ ÿ≤ŸÖÿßŸÜ ÿ≥Ÿæÿ±€å ÿ¥ÿØŸá: {elapsed} ÿ´ÿßŸÜ€åŸá",
                    chat_id=admin_id,
                    message_id=progress_msg.message_id
                )
            except:
                pass

        total_time = int(time.time() - start_time)
        report = (
            f"‚úÖ ÿπŸÖŸÑ€åÿßÿ™ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ™⁄©ŸÖ€åŸÑ ÿ¥ÿØ!\n\n"
            f"‚Ä¢ ⁄©ŸÑ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {total_users}\n"
            f"‚Ä¢ ÿßÿ±ÿ≥ÿßŸÑ ŸÖŸàŸÅŸÇ: {success}\n"
            f"‚Ä¢ ÿßÿ±ÿ≥ÿßŸÑ ŸÜÿßŸÖŸàŸÅŸÇ: {failed}\n"
            f"‚è± ÿ≤ŸÖÿßŸÜ ⁄©ŸÑ: {total_time} ÿ´ÿßŸÜ€åŸá"
        )
        
        bot.edit_message_text(
            report,
            chat_id=admin_id,
            message_id=progress_msg.message_id
        )

        log_admin_action(
            admin_id,
            "ÿßÿ±ÿ≥ÿßŸÑ ÿ≥⁄©Ÿá ŸáŸÖ⁄ØÿßŸÜ€å",
            f"ŸÖŸÇÿØÿßÿ±: {amount} | ŸÖŸàŸÅŸÇ: {success} | ŸÜÿßŸÖŸàŸÅŸÇ: {failed}"
        )

    except ValueError:
        bot.reply_to(message, "  ŸÅŸÇÿ∑ ÿπÿØÿØ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ!")
    except Exception as e:
        error_msg = f"‚ö†Ô∏è ÿÆÿ∑ÿß€å ÿ≥€åÿ≥ÿ™ŸÖ€å: {str(e)}\n{traceback.format_exc()}"
        bot.reply_to(message, error_msg)
        print(error_msg)
        
admin_inputs = {}

def start_add_channel(message):
    admin_inputs[message.from_user.id] = {}
    msg = bot.send_message(message.chat.id, "ŸÖÿ±ÿ≠ŸÑŸá 1Ô∏è‚É£:  `chat_id` ⁄©ÿßŸÜÿßŸÑ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:", parse_mode="Markdown")
    bot.register_next_step_handler(msg, get_chat_id)

def get_chat_id(message):
    user_id = message.from_user.id
    if user_id not in admin_inputs:
        admin_inputs[user_id] = {}
    
    admin_inputs[user_id]["chat_id"] = message.text.strip()
    msg = bot.reply_to(message, "ŸÖÿ±ÿ≠ŸÑŸá 2Ô∏è‚É£: ÿ≠ÿßŸÑÿß `ŸÜÿßŸÖ ⁄©ÿßŸÜÿßŸÑ` ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:")
    bot.register_next_step_handler(msg, get_title)

def get_title(message):
    title = message.text.strip()
    if not title:
        msg = bot.send_message(message.chat.id, " ŸÜÿßŸÖ ⁄©ÿßŸÜÿßŸÑ ŸÜŸÖ€å‚Äåÿ™ŸàÿßŸÜÿØ ÿÆÿßŸÑ€å ÿ®ÿßÿ¥ÿØ. ÿØŸàÿ®ÿßÿ±Ÿá Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:")
        bot.register_next_step_handler(msg, get_title)
        return
    admin_inputs[message.from_user.id]["title"] = title
    msg = bot.send_message(message.chat.id, "ŸÖÿ±ÿ≠ŸÑŸá 3Ô∏è‚É£: ÿ≠ÿßŸÑÿß `http://ble.ir/ ŸÑ€åŸÜ⁄© ÿØÿπŸàÿ™` ⁄©ÿßŸÜÿßŸÑ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:")
    bot.register_next_step_handler(msg, get_link)

def get_link(message):
    try:
        link = message.text.strip()
        
        if not link.startswith("http"):
            error_text = " ŸÑ€åŸÜ⁄© ÿ®ÿß€åÿØ ÿ®ÿß http €åÿß https ÿ¥ÿ±Ÿàÿπ ÿ¥ŸàÿØ.  ŸÑ€åŸÜ⁄© ÿµÿ≠€åÿ≠ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:"
            msg = bot.send_message(
                chat_id=message.chat.id,
                text=error_text
            )
            bot.register_next_step_handler(msg, get_link)
            return
        
        admin_inputs[message.from_user.id]["link"] = link
        
        instruction_text = (
            "ŸÖÿ±ÿ≠ŸÑŸá 4Ô∏è‚É£:  **ÿ≤ŸÖÿßŸÜ ÿßŸÜŸÇÿ∂ÿß** ÿ±ÿß ÿ®Ÿá ÿµŸàÿ±ÿ™ `HH:MM` Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:\n"
            "ŸÖÿ´ÿßŸÑ: 23:59"
        )
        
        msg = bot.send_message(
            chat_id=message.chat.id,
            text=instruction_text,
            parse_mode="Markdown"
        )
        
        bot.register_next_step_handler(msg, get_expire_date)
    
    except Exception as e:
        print(f"ÿÆÿ∑ÿß ÿØÿ± get_link: {e}")
        bot.reply_to(message, " ÿÆÿ∑ÿß€å€å ÿØÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥ ÿ±ÿÆ ÿØÿßÿØ.")

def get_expire_date(message):
    try:
        user_input = message.text.strip()
        
        if user_input.count(":") != 1:
            raise ValueError("ŸÅÿ±ŸÖÿ™ ŸÜÿßŸÖÿπÿ™ÿ®ÿ±")
        
        hours_str, minutes_str = user_input.split(":")
        hours = int(hours_str)
        minutes = int(minutes_str)
        
        if hours < 0 or minutes < 0:
            raise ValueError("ŸÖŸÇÿßÿØ€åÿ± ŸÖŸÜŸÅ€å ŸÖÿ¨ÿßÿ≤ ŸÜ€åÿ≥ÿ™ŸÜÿØ!")
        
        delta = timedelta(hours=hours, minutes=minutes)
        
        expire_at = datetime.now() + delta
        
        if expire_at.year > 9999:
            raise ValueError("ÿ≤ŸÖÿßŸÜ Ÿàÿßÿ±ÿØ ÿ¥ÿØŸá ÿ®€åÿ¥ ÿßÿ≤ ÿ≠ÿØ ÿ®ÿ≤ÿ±⁄Ø ÿßÿ≥ÿ™!")
        
        data = admin_inputs.pop(message.from_user.id)
        add_channel(
            data["chat_id"],
            data["title"],
            data["link"],
            expire_at.strftime("%Y-%m-%d %H:%M:%S")
        )
        
        bot.send_message(message.chat.id, "‚úÖ ⁄©ÿßŸÜÿßŸÑ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ´ÿ®ÿ™ ÿ¥ÿØ.")
    
    except OverflowError:
        msg = bot.send_message(
            message.chat.id,
            "ÿπÿØÿØ ⁄©Ÿà⁄Ü€å⁄© ÿ™ÿ± Ÿàÿßÿ±ÿØ ⁄©ŸÜ"
        )
        bot.register_next_step_handler(msg, get_expire_date)
    
    except (ValueError, IndexError):
        msg = bot.send_message(
            message.chat.id,
            "ŸÖÿ´ÿßŸÑ 00:15 2:00 999999:00"
        )
        bot.register_next_step_handler(msg, get_expire_date)
    
    except Exception as e:
        admin_inputs.pop(message.from_user.id, None)
        bot.send_message(
            message.chat.id,
            f" ÿÆÿ∑ÿß€å ÿ≥€åÿ≥ÿ™ŸÖ€å: {str(e)}"
        )
def process_add_bot_inventory(message):
    try:
        amount = int(message.text.strip())
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE bot_inventory SET balance = balance + ? WHERE id = 1", (amount,))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, f"ŸÖŸàÿ¨ŸàÿØ€å ÿ±ÿ®ÿßÿ™ ÿ®Ÿá ÿßŸÜÿØÿßÿ≤Ÿá {amount} ÿßŸÅÿ≤ÿß€åÿ¥ €åÿßŸÅÿ™.")
    except Exception as e:
        bot.send_message(message.chat.id, f"ÿÆÿ∑ÿß ÿØÿ± ÿßŸÅÿ≤ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å: {e}")

def process_reduce_bot_inventory(message):
    try:
        amount = int(message.text.strip())
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE bot_inventory SET balance = balance - ? WHERE id = 1", (amount,))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, f"ŸÖŸàÿ¨ŸàÿØ€å ÿ±ÿ®ÿßÿ™ ÿ®Ÿá ÿßŸÜÿØÿßÿ≤Ÿá {amount} ⁄©ÿßŸáÿ¥ €åÿßŸÅÿ™.")
    except Exception as e:
        bot.send_message(message.chat.id, f"ÿÆÿ∑ÿß ÿØÿ± ⁄©ÿßŸáÿ¥ ŸÖŸàÿ¨ŸàÿØ€å: {e}")

def process_add_balance(message):
    try:
        user_id, amount = map(int, message.text.split())
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
            conn.commit()
            conn.close()
        bot.reply_to(message, f"‚úÖ ŸÖŸàÿ¨ŸàÿØ€å ⁄©ÿßÿ±ÿ®ÿ± {user_id} ÿ®Ÿá ŸÖ€åÿ≤ÿßŸÜ {amount} ÿ™ŸàŸÖÿßŸÜ ÿßŸÅÿ≤ÿß€åÿ¥ €åÿßŸÅÿ™.")
        log_admin_action(message.from_user.id, "ÿßŸÅÿ≤ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å", f"⁄©ÿßÿ±ÿ®ÿ±: {user_id} | ŸÖÿ®ŸÑÿ∫: {amount}")
    except Exception as e:
        bot.reply_to(message, " ÿÆÿ∑ÿß! ŸÅÿ±ŸÖÿ™ Ÿàÿ±ŸàÿØ€å ŸÜÿßŸÖÿπÿ™ÿ®ÿ± ÿßÿ≥ÿ™. ŸÖÿ´ÿßŸÑ ÿµÿ≠€åÿ≠: 12345 5000")

def process_reduce_balance(message):
    try:
        user_id, amount = map(int, message.text.split())
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ? AND balance >= ?", 
                          (amount, user_id, amount))
            if cursor.rowcount == 0:
                bot.reply_to(message, " ŸÖŸàÿ¨ŸàÿØ€å ⁄©ÿßÿ±ÿ®ÿ± ⁄©ÿßŸÅ€å ŸÜ€åÿ≥ÿ™ €åÿß ÿ¥ŸÜÿßÿ≥Ÿá ŸÜÿßŸÖÿπÿ™ÿ®ÿ± ÿßÿ≥ÿ™.")
            else:
                conn.commit()
                bot.reply_to(message, f"‚úÖ ŸÖŸàÿ¨ŸàÿØ€å ⁄©ÿßÿ±ÿ®ÿ± {user_id} ÿ®Ÿá ŸÖ€åÿ≤ÿßŸÜ {amount} ÿ™ŸàŸÖÿßŸÜ ⁄©ÿßŸáÿ¥ €åÿßŸÅÿ™.")
                log_admin_action(message.from_user.id, "⁄©ÿßŸáÿ¥ ŸÖŸàÿ¨ŸàÿØ€å", f"⁄©ÿßÿ±ÿ®ÿ±: {user_id} | ŸÖÿ®ŸÑÿ∫: {amount}")
            conn.close()
    except Exception as e:
        bot.reply_to(message, " ÿÆÿ∑ÿß! ŸÅÿ±ŸÖÿ™ Ÿàÿ±ŸàÿØ€å ŸÜÿßŸÖÿπÿ™ÿ®ÿ± ÿßÿ≥ÿ™. ŸÖÿ´ÿßŸÑ ÿµÿ≠€åÿ≠: 12345 5000")

@bot.callback_query_handler(func=lambda call: call.data.startswith("user_info_exit"))
def admin_user_info_exit(call):
    try:
        _, unique_id = call.data.split("|")
        admin_user_info_results.pop(unique_id, None)
    except:
        admin_user_info_results.clear()  

    try:
        bot.edit_message_text("ÿπŸÖŸÑ€åÿßÿ™ ÿ¨ÿ≥ÿ™ÿ¨Ÿà ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿ±ÿ≥€åÿØ.", call.message.chat.id, call.message.message_id)
    except:
        bot.send_message(call.message.chat.id, "ÿπŸÖŸÑ€åÿßÿ™ ÿ¨ÿ≥ÿ™ÿ¨Ÿà ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿ±ÿ≥€åÿØ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("user_info|"))
def admin_user_info_pagination(call):
    try:
        _, unique_id, page_str = call.data.split("|")
        page = int(page_str)
    except (ValueError, IndexError):
        return
    
    show_user_info_page(unique_id, page, call.message.chat.id, call.message.message_id)

def admin_add_gift(message):
    gift = message.text.strip()
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO gifts (gift) VALUES (?)", (gift,))
        conn.commit()
        conn.close()
    bot.reply_to(message, f"ŸáÿØ€åŸá '{gift}' ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ.")

def admin_edit_gift(message):
    try:
        gift_id, new_gift = message.text.strip().split(maxsplit=1)
        gift_id = int(gift_id)
    except Exception as e:
        bot.reply_to(message, "Ÿàÿ±ŸàÿØ€å ÿ®Ÿá ÿØÿ±ÿ≥ÿ™€å ŸÅÿ±ŸÖÿ™ ŸÜÿ¥ÿØŸá ÿßÿ≥ÿ™.  ÿ®Ÿá ÿß€åŸÜ ÿµŸàÿ±ÿ™ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ: gift_id new_gift_code")
        return
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE gifts SET gift = ? WHERE id = ?", (new_gift, gift_id))
        conn.commit()
        conn.close()
    bot.reply_to(message, f"ŸáÿØ€åŸá ÿ®ÿß ÿ¥ŸÜÿßÿ≥Ÿá {gift_id} ÿ®Ÿá '{new_gift}' ÿ™ÿ∫€å€åÿ± €åÿßŸÅÿ™.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_coin|"))
def handle_edit_coin(call):
    if call.from_user.id not in ADMIN_IDS:
        return
    
    _, uid, page, unique_id = call.data.split("|")
    msg = bot.send_message(
        call.message.chat.id,
        f"ŸÖŸÇÿØÿßÿ± ÿ¨ÿØ€åÿØ ÿ≥⁄©Ÿá ÿ®ÿ±ÿß€å ⁄©ÿßÿ±ÿ®ÿ± {uid} ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:",
    )
    bot.register_next_step_handler(msg, process_coin_edit, uid, page, unique_id)

def process_coin_edit(message, uid, page, unique_id):
    try:
        new_coin = int(message.text)
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE users SET coin_balance = ? WHERE user_id = ?",
                (new_coin, uid)
            )
            conn.commit()
            conn.close()
        bot.send_message(message.chat.id, f"‚úÖ ÿ≥⁄©Ÿá ⁄©ÿßÿ±ÿ®ÿ± {uid} ÿ®Ÿá {new_coin} ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ ÿ¥ÿØ.")
        show_user_info_page(unique_id, int(page), message.chat.id, message.message_id)
    except ValueError:
        bot.send_message(message.chat.id, " ŸÖŸÇÿØÿßÿ± ŸÜÿßŸÖÿπÿ™ÿ®ÿ±!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("change_gender|"))
def handle_change_gender(call):
    if call.from_user.id not in ADMIN_IDS:
        return
    
    _, uid, page, unique_id = call.data.split("|")
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("Ÿæÿ≥ÿ±", callback_data=f"setgender_{uid}_Ÿæÿ≥ÿ±_{page}_{unique_id}"),
        types.InlineKeyboardButton("ÿØÿÆÿ™ÿ±", callback_data=f"setgender_{uid}_ÿØÿÆÿ™ÿ±_{page}_{unique_id}")
    )
    bot.send_message(call.message.chat.id, "ÿ¨ŸÜÿ≥€åÿ™ ÿ¨ÿØ€åÿØ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("setgender_"))
def process_gender_change(call):
    _, uid, gender, page, unique_id = call.data.split("_")
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE users SET gender = ? WHERE user_id = ?",
            (gender, uid)
        )
        conn.commit()
        conn.close()
    bot.send_message(call.message.chat.id, f"‚úÖ ÿ¨ŸÜÿ≥€åÿ™ ⁄©ÿßÿ±ÿ®ÿ± {uid} ÿ®Ÿá {gender} ÿ™ÿ∫€å€åÿ± €åÿßŸÅÿ™.")
    show_user_info_page(unique_id, int(page), call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("ban_toggle|"))
def handle_ban_toggle(call):
    if call.from_user.id not in ADMIN_IDS:
        return
    
    _, uid, page, unique_id = call.data.split("|")
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT 1 FROM banned_users WHERE user_id = ?", (uid,))
        if cursor.fetchone():
            cursor.execute("DELETE FROM banned_users WHERE user_id = ?", (uid,))
            action = "ÿ¢ŸÜÿ®ŸÜ"
        else:
            cursor.execute("INSERT INTO banned_users (user_id, ban_reason) VALUES (?, ?)", 
                          (uid, "ÿ®ŸÜ ÿØÿ≥ÿ™€å ÿ™Ÿàÿ≥ÿ∑ ÿßÿØŸÖ€åŸÜ"))
            action = "ÿ®ŸÜ"
        conn.commit()
        conn.close()
    bot.send_message(call.message.chat.id, f"‚úÖ ⁄©ÿßÿ±ÿ®ÿ± {uid} {action} ÿ¥ÿØ.")
    show_user_info_page(unique_id, int(page), call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_waiting|"))
def handle_remove_waiting(call):
    if call.from_user.id not in ADMIN_IDS:
        return
    
    _, uid, page, unique_id = call.data.split("|")
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM waiting_users WHERE user_id = ?", (uid,))
        conn.commit()
        conn.close()
    bot.send_message(call.message.chat.id, f"‚úÖ ⁄©ÿßÿ±ÿ®ÿ± {uid} ÿßÿ≤ ŸÑ€åÿ≥ÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ≠ÿ∞ŸÅ ÿ¥ÿØ.")
    show_user_info_page(unique_id, int(page), call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_user|"))
def handle_delete_user(call):
    if call.from_user.id not in ADMIN_IDS:
        return
    
    _, uid, page, unique_id = call.data.split("|")
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM users WHERE user_id = ?", (uid,))
        cursor.execute("DELETE FROM waiting_users WHERE user_id = ?", (uid,))
        cursor.execute("DELETE FROM active_chats WHERE user_id = ?", (uid,))
        cursor.execute("DELETE FROM banned_users WHERE user_id = ?", (uid,))
        conn.commit()
        conn.close()
    bot.send_message(call.message.chat.id, f" ⁄©ÿßÿ±ÿ®ÿ± {uid} ÿ®Ÿá ÿ∑Ÿàÿ± ⁄©ÿßŸÖŸÑ ÿ≠ÿ∞ŸÅ ÿ¥ÿØ.")
    show_user_info_page(unique_id, int(page), call.message.chat.id, call.message.message_id)

admin_user_info_results = {}

def show_user_info_page(unique_id, page, chat_id, message_id):
    results = admin_user_info_results.get(unique_id)
    if not results:
        bot.edit_message_text("ŸÜÿ™ÿß€åÿ¨ ÿ¨ÿ≥ÿ™ÿ¨Ÿà ŸÖŸÜŸÇÿ∂€å ÿ¥ÿØŸá ÿßÿ≥ÿ™.", chat_id, message_id)
        return

    total = len(results)
    if page < 0:
        page = 0
    elif page >= total:
        page = total - 1

    uid, coin_balance, balance, gender, extra = results[page]
    text = f"üë§ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ⁄©ÿßÿ±ÿ®ÿ± {uid}:\n"
    text += f" - ü™ô ÿ≥⁄©Ÿá: {coin_balance}\n - üí∞ ŸÖŸàÿ¨ŸàÿØ€å: {balance}\n - üë§ ÿ¨ŸÜÿ≥€åÿ™: {gender}\n"
    if extra:
        text += extra

    markup = types.InlineKeyboardMarkup(row_width=2)

    markup.add(
        types.InlineKeyboardButton("ü™ô Ÿà€åÿ±ÿß€åÿ¥ ÿ≥⁄©Ÿá", callback_data=f"edit_coin|{uid}|{page}|{unique_id}"),
        types.InlineKeyboardButton("üí∞ Ÿà€åÿ±ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å", callback_data=f"edit_balance|{uid}|{page}|{unique_id}"),
    )
    markup.add(
        types.InlineKeyboardButton("üîÑ ÿ™ÿ∫€å€åÿ± ÿ¨ŸÜÿ≥€åÿ™", callback_data=f"change_gender|{uid}|{page}|{unique_id}"),
        types.InlineKeyboardButton("‚õî ÿ®ŸÜ/ÿ¢ŸÜÿ®ŸÜ", callback_data=f"ban_toggle|{uid}|{page}|{unique_id}")
    )
    markup.add(
        types.InlineKeyboardButton("üßπ ÿ≠ÿ∞ŸÅ ÿßÿ≤ ÿßŸÜÿ™ÿ∏ÿßÿ±", callback_data=f"remove_waiting|{uid}|{page}|{unique_id}"),
        types.InlineKeyboardButton(" ÿ≠ÿ∞ŸÅ ⁄©ÿßŸÖŸÑ ⁄©ÿßÿ±ÿ®ÿ±", callback_data=f"delete_user|{uid}|{page}|{unique_id}")
    )

    navigation = []
    if page > 0:
        navigation.append(types.InlineKeyboardButton("‚¨ÖÔ∏è ŸÇÿ®ŸÑ€å", callback_data=f"user_info|{unique_id}|{page-1}"))
    if page < total - 1:
        navigation.append(types.InlineKeyboardButton("‚û°Ô∏è ÿ®ÿπÿØ€å", callback_data=f"user_info|{unique_id}|{page+1}"))
    if navigation:
        markup.add(*navigation)

    markup.add(types.InlineKeyboardButton(" ÿÆÿ±Ÿàÿ¨", callback_data=f"user_info_exit|{unique_id}"))

    try:
        bot.edit_message_text(text, chat_id, message_id, reply_markup=markup)
    except Exception as e:
        print(f"ÿÆÿ∑ÿß ÿØÿ± Ÿà€åÿ±ÿß€åÿ¥ Ÿæ€åÿßŸÖ: {e}")
        bot.send_message(chat_id, text, reply_markup=markup)

def admin_get_user_full_info(message):
    input_str = message.text.strip()
    clauses = []
    params = []
    
    if input_str.isdigit():
        clauses.append("user_id = ?")
        params.append(int(input_str))
    elif input_str in ["Ÿæÿ≥ÿ±", "ÿØÿÆÿ™ÿ±"]:
        clauses.append("gender = ?")
        params.append(input_str)

    else:
        filters = [f.strip() for f in input_str.split(",")]
        for cond in filters:
            if ":" not in cond:
                bot.reply_to(message, f"ŸÅÿ±ŸÖÿ™ ÿ¥ÿ±ÿ∑ '{cond}' ŸÜÿßÿØÿ±ÿ≥ÿ™ ÿßÿ≥ÿ™.  ÿßÿ≤ ŸÅÿ±ŸÖÿ™ key:value ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ.")
                return
            key, value = cond.split(":", 1)
            key = key.strip().lower()
            value = value.strip()
            if key == "user_id":
                try:
                    uid = int(value)
                except ValueError:
                    bot.reply_to(message, "ÿ¥ŸÜÿßÿ≥Ÿá ⁄©ÿßÿ±ÿ®ÿ± ÿ®ÿß€åÿØ ÿπÿØÿØ€å ÿ®ÿßÿ¥ÿØ!")
                    return
                clauses.append("user_id = ?")
                params.append(uid)
            elif key in ["balance", "coin_balance"]:
                op = "="
                if value[0] in ['>', '<', '=']:
                    op = value[0]
                    num_str = value[1:].strip()
                else:
                    num_str = value
                try:
                    num_val = float(num_str)
                except ValueError:
                    bot.reply_to(message, f"ŸÖŸÇÿØÿßÿ± {key} ÿ®ÿß€åÿØ ÿπÿØÿØ€å ÿ®ÿßÿ¥ÿØ!")
                    return
                clauses.append(f"{key} {op} ?")
                params.append(num_val)
            elif key == "gender":
                clauses.append("gender = ?")
                params.append(value)
            else:
                bot.reply_to(message, f"ŸÅ€åŸÑÿ™ÿ± '{key}' Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ŸÜŸÖ€å‚Äåÿ¥ŸàÿØ!")
                return

    if not clauses:
        bot.reply_to(message, "Ÿá€å⁄Ü ŸÅ€åŸÑÿ™ÿ± ŸÖÿπÿ™ÿ®ÿ±€å Ÿàÿßÿ±ÿØ ŸÜÿ¥ÿØŸá ÿßÿ≥ÿ™.")
        return

    where_clause = " AND ".join(clauses)
    query = f"SELECT user_id, coin_balance, balance, gender FROM users WHERE {where_clause}"
    
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(query, params)
        user_rows = cursor.fetchall()
        conn.close()

    if not user_rows:
        bot.reply_to(message, "Ÿá€å⁄Ü ⁄©ÿßÿ±ÿ®ÿ±€å ŸÖÿ∑ÿßÿ®ŸÇ ÿ®ÿß ÿß€åŸÜ ŸÅ€åŸÑÿ™ÿ± €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
        return
    
    results = []
    for row in user_rows:
        uid, coin_balance, balance, gender = row
        extra = ""
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT desired_gender, join_time FROM waiting_users WHERE user_id = ?", (uid,))
            waiting_info = cursor.fetchone()
            conn.close()
        if waiting_info:
            desired_gender, join_time = waiting_info
            extra += f"\n - Ÿàÿ∂ÿπ€åÿ™ ÿßŸÜÿ™ÿ∏ÿßÿ±: ÿ™ÿ±ÿ¨€åÿ≠ ÿ¥ÿ±€å⁄©: {desired_gender}, ÿ≤ŸÖÿßŸÜ Ÿàÿ±ŸàÿØ: {join_time}"
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT partner_id FROM active_chats WHERE user_id = ?", (uid,))
            active_chat = cursor.fetchone()
            conn.close()
        if active_chat:
            extra += f"\n - ÿØÿ± ⁄Üÿ™ ÿ®ÿß ⁄©ÿßÿ±ÿ®ÿ±: {active_chat[0]}"
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT partner_id FROM last_chat WHERE user_id = ?", (uid,))
            last_chat = cursor.fetchone()
            conn.close()
        if last_chat:
            extra += f"\n - ÿ¢ÿÆÿ±€åŸÜ ⁄Üÿ™ ÿ®ÿß ⁄©ÿßÿ±ÿ®ÿ±: {last_chat[0]}"
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT ban_reason FROM banned_users WHERE user_id = ?", (uid,))
            banned = cursor.fetchone()
            conn.close()
        if banned:
            extra += f"\n - Ÿàÿ∂ÿπ€åÿ™ ÿ®ŸÜ: {banned[0]}"
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT referral_code FROM referral_links WHERE user_id = ?", (uid,))
            referral = cursor.fetchone()
            conn.close()
        if referral:
            extra += f"\n - ⁄©ÿØ ÿ±ŸÅÿ±ÿßŸÑ: {referral[0]}"
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT referral_code FROM money_referral_links WHERE user_id = ?", (uid,))
            money_ref = cursor.fetchone()
            conn.close()
        if money_ref:
            extra += f"\n - ⁄©ÿØ ÿ±ŸÅÿ±ÿßŸÑ ŸÖÿßŸÑ€å: {money_ref[0]}"
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT blocked_id FROM blocked_users WHERE blocker_id = ?", (uid,))
            blocked_by = cursor.fetchall()
            conn.close()
        if blocked_by:
            blocked_ids = ", ".join(str(x[0]) for x in blocked_by)
            extra += f"\n - ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ®ŸÑÿß⁄© ÿ¥ÿØŸá: {blocked_ids}"
        with db_lock:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT blocker_id FROM blocked_users WHERE blocked_id = ?", (uid,))
            blocked_for = cursor.fetchall()
            conn.close()
        if blocked_for:
            blocked_for_ids = ", ".join(str(x[0]) for x in blocked_for)
            extra += f"\n - ÿ®ŸÑÿß⁄© ÿ¥ÿØŸá ÿ™Ÿàÿ≥ÿ∑: {blocked_for_ids}"
        
        results.append((uid, coin_balance, balance, gender, extra))

    unique_id = generate_unique_id()
    admin_user_info_results[unique_id] = results

    show_user_info_page(unique_id, 0, message.chat.id, message.message_id)
def generate_unique_id(length=8):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def admin_unban_user(message):
    try:
        user_id = int(message.text.strip())
    except ValueError:
        bot.reply_to(message, "ÿ¥ŸÜÿßÿ≥Ÿá Ÿàÿßÿ±ÿØ ÿ¥ÿØŸá ŸÖÿπÿ™ÿ®ÿ± ŸÜ€åÿ≥ÿ™!")
        return
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM banned_users WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()
    bot.reply_to(message, f"⁄©ÿßÿ±ÿ®ÿ± {user_id} ÿßÿ≤ ÿ≠ÿßŸÑÿ™ ÿ®ŸÜ ÿÆÿßÿ±ÿ¨ ÿ¥ÿØ.")

def log_admin_action(admin_id, action, details=""):
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO admin_logs (admin_id, action, details) VALUES (?, ?, ?)", (admin_id, action, details))
        conn.commit()
        conn.close()

def admin_dashboard(call):
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM active_chats")
        active_chats = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM banned_users")
        banned_users = cursor.fetchone()[0]
        conn.close()
    text = f"""
ÿØÿßÿ¥ÿ®Ÿàÿ±ÿØ ÿ¢ŸÖÿßÿ±€å:
--------------------
ÿ™ÿπÿØÿßÿØ ⁄©ŸÑ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {total_users}
⁄Üÿ™‚ÄåŸáÿß€å ŸÅÿπÿßŸÑ: {active_chats}
⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ®ŸÜ‚Äåÿ¥ÿØŸá: {banned_users}
"""
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id)


def admin_view_logs(call):
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT admin_id, action, details, timestamp FROM admin_logs ORDER BY timestamp DESC LIMIT 20")
        logs = cursor.fetchall()
        conn.close()
    text = "ÿ¢ÿÆÿ±€åŸÜ ŸÑÿß⁄Ø‚ÄåŸáÿß:\n"
    for log in logs:
        text += f"[{log[3]}] Admin {log[0]}: {log[1]} - {log[2]}\n"
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id)

def admin_disconnect_chat(message):
    try:
        target_id = int(message.text.strip())
    except ValueError:
        bot.reply_to(message, "ÿ¥ŸÜÿßÿ≥Ÿá Ÿàÿßÿ±ÿØ ÿ¥ÿØŸá ŸÖÿπÿ™ÿ®ÿ± ŸÜ€åÿ≥ÿ™!")
        return

    partner_id = remove_active_chat(target_id)
    if partner_id:
        bot.reply_to(message, f"⁄Üÿ™ ⁄©ÿßÿ±ÿ®ÿ± {target_id} ÿ®Ÿá ŸáŸÖÿ±ÿßŸá ⁄©ÿßÿ±ÿ®ÿ± {partner_id} ŸÇÿ∑ÿπ ÿ¥ÿØ.")
        bot.send_message(target_id, "⁄Üÿ™ ÿ¥ŸÖÿß ÿ™Ÿàÿ≥ÿ∑ ÿ≥€åÿ≥ÿ™ŸÖ ÿ®Ÿá ÿµŸàÿ±ÿ™ ÿÆŸàÿØ⁄©ÿßÿ± ŸÇÿ∑ÿπ ÿ¥ÿØ.", reply_markup=get_inline_main_menu())
        bot.send_message(partner_id, "⁄Üÿ™ ÿ¥ŸÖÿß ÿ™Ÿàÿ≥ÿ∑ ÿ≥€åÿ≥ÿ™ŸÖ ÿ®Ÿá ÿµŸàÿ±ÿ™ ÿÆŸàÿØ⁄©ÿßÿ± ŸÇÿ∑ÿπ ÿ¥ÿØ.", reply_markup=get_inline_main_menu())
    else:
        bot.reply_to(message, "⁄©ÿßÿ±ÿ®ÿ± ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿØÿ± ⁄Üÿ™ ŸÅÿπÿßŸÑ ŸÜŸÖ€å‚Äåÿ®ÿßÿ¥ÿØ.")

def process_send_to_all_amount(message):
    try:
        amount = int(message.text)
        if amount <= 0:
            bot.reply_to(message, " ŸÖŸÇÿØÿßÿ± ÿ®ÿß€åÿØ ÿ®ÿ≤ÿ±⁄Øÿ™ÿ± ÿßÿ≤ ÿµŸÅÿ± ÿ®ÿßÿ¥ÿØ!")
            return

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users")
        users = cursor.fetchall()

        success = 0
        failed = 0
        for user in users:
            try:
                cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user[0]))
                success += 1
            except:
                failed += 1

        try:
            bot.send_message(user[0], f"""
        üéâ ŸÖŸàÿ¨ŸàÿØ€å ÿ≠ÿ≥ÿßÿ® ÿ¥ŸÖÿß ÿßŸÅÿ≤ÿß€åÿ¥ €åÿßŸÅÿ™!
        ‚Ä¢ ŸÖÿ®ŸÑÿ∫: {amount} ÿ™ŸàŸÖÿßŸÜ
        ‚Ä¢ ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™: Ÿàÿßÿ±€åÿ≤ ÿØÿ≥ÿ™Ÿá‚Äåÿ¨ŸÖÿπ€å ÿ™Ÿàÿ≥ÿ∑ ŸÖÿØ€åÿ±€åÿ™
            """)
        except:
            pass

        conn.commit()
        conn.close()

        bot.reply_to(message, f"""
 ÿπŸÖŸÑ€åÿßÿ™ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿßŸÜÿ¨ÿßŸÖ ÿ¥ÿØ!
‚Ä¢ ÿ™ÿπÿØÿßÿØ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ŸÖŸàŸÅŸÇ: {success}
‚Ä¢ ÿ™ÿπÿØÿßÿØ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ŸÜÿßŸÖŸàŸÅŸÇ: {failed}
‚Ä¢ ŸÖÿ®ŸÑÿ∫ ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØŸá: {amount} ÿ™ŸàŸÖÿßŸÜ
        """)

    except ValueError:
        bot.reply_to(message, "  €å⁄© ÿπÿØÿØ ŸÖÿπÿ™ÿ®ÿ± Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ!")

def add_coins(message):
    try:
        user_id, amount = map(int, message.text.split())
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET coin_balance = coin_balance + ? WHERE user_id = ?", (amount, user_id))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, f" {amount} ÿ≥⁄©Ÿá ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ± {user_id} ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ.")
        bot.send_message(user_id, f"‚úÖ ÿ≥⁄©Ÿá ÿ¥ŸÖÿß ÿ®Ÿá ŸÖŸÇÿØÿßÿ± {amount} ÿßŸÅÿ≤ÿß€åÿ¥ €åÿßŸÅÿ™")
    except:
        bot.send_message(message.chat.id, "ÿÆÿ∑ÿß ÿØÿ± ŸÅÿ±ŸÖÿ™ Ÿàÿ±ŸàÿØ€å.  ÿ®Ÿá‚ÄåÿØÿ±ÿ≥ÿ™€å Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ: user_id amount")

def reduce_coins(message):
    try:
        user_id, amount = map(int, message.text.split())
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET coin_balance = coin_balance - ? WHERE user_id = ? AND coin_balance >= ?", (amount, user_id, amount))
        if cursor.rowcount == 0:
            bot.send_message(message.chat.id, " ⁄©ÿßÿ±ÿ®ÿ± ÿ≥⁄©Ÿá ⁄©ÿßŸÅ€å ÿ®ÿ±ÿß€å ⁄©ÿßŸáÿ¥ ŸÜÿØÿßÿ±ÿØ €åÿß ÿ¥ŸÜÿßÿ≥Ÿá ŸÜÿßŸÖÿπÿ™ÿ®ÿ± ÿßÿ≥ÿ™.")
        else:
            conn.commit()
            bot.send_message(message.chat.id, f" {amount} ÿ≥⁄©Ÿá ÿßÿ≤ ⁄©ÿßÿ±ÿ®ÿ± {user_id} ⁄©ÿ≥ÿ± ÿ¥ÿØ.")
            bot.send_message(user_id, f"‚úÖ ÿ≥⁄©Ÿá ÿ¥ŸÖÿß ÿ®Ÿá ŸÖŸÇÿØÿßÿ± {amount} ⁄©ÿßŸáÿ¥ €åÿßŸÅÿ™")
        conn.close()
    except:
        bot.send_message(message.chat.id, "ÿÆÿ∑ÿß ÿØÿ± ŸÅÿ±ŸÖÿ™ Ÿàÿ±ŸàÿØ€å.  ÿ®Ÿá‚ÄåÿØÿ±ÿ≥ÿ™€å Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ: user_id amount")

def ban_user(message):
    user_id = message.text.strip()
    try:
        user_id = int(user_id)
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO banned_users (user_id, ban_reason) VALUES (?, ?)", (user_id, "ÿ®ŸÜ ÿ™Ÿàÿ≥ÿ∑ ÿßÿØŸÖ€åŸÜ"))
        conn.commit()
        conn.close()
        bot.reply_to(message, f"⁄©ÿßÿ±ÿ®ÿ± {user_id} ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ®ŸÜ ÿ¥ÿØ.")
    except ValueError:
        bot.reply_to(message, "ÿ¥ŸÜÿßÿ≥Ÿá Ÿàÿßÿ±ÿØ ÿ¥ÿØŸá ŸÖÿπÿ™ÿ®ÿ± ŸÜ€åÿ≥ÿ™.")

def add_balance(message):
    try:
        user_id, amount = map(int, message.text.split())
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
        conn.commit()
        conn.close()
        bot.reply_to(message, f"ŸÖŸàÿ¨ŸàÿØ€å ⁄©ÿßÿ±ÿ®ÿ± {user_id} ÿ®Ÿá ŸÖŸÇÿØÿßÿ± {amount} ÿßŸÅÿ≤ÿß€åÿ¥ €åÿßŸÅÿ™.")
    except Exception as e:
        bot.reply_to(message, "ÿÆÿ∑ÿß ÿØÿ± ÿßŸÅÿ≤ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å.  ŸÅÿ±ŸÖÿ™ Ÿàÿ±ŸàÿØ€å ÿ±ÿß ÿØÿ±ÿ≥ÿ™ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.")

def reduce_balance(message):
    try:
        user_id, amount = map(int, message.text.split())
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, user_id))
        conn.commit()
        conn.close()
        bot.reply_to(message, f"ŸÖŸàÿ¨ŸàÿØ€å ⁄©ÿßÿ±ÿ®ÿ± {user_id} ÿ®Ÿá ŸÖŸÇÿØÿßÿ± {amount} ⁄©ÿßŸáÿ¥ €åÿßŸÅÿ™.")
    except Exception as e:
        bot.reply_to(message, "ÿÆÿ∑ÿß ÿØÿ± ⁄©ÿßŸáÿ¥ ŸÖŸàÿ¨ŸàÿØ€å.  ŸÅÿ±ŸÖÿ™ Ÿàÿ±ŸàÿØ€å ÿ±ÿß ÿØÿ±ÿ≥ÿ™ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.")

def broadcast_message(message):
    content_type = message.content_type

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    rows = cursor.fetchall()
    conn.close()

    total_users = len(rows)
    success = 0
    failed = 0
    blocked = 0
    start_time = time.time()

    progress_msg = bot.send_message(
        message.chat.id, 
        f"ÿ¥ÿ±Ÿàÿπ ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ...\n⁄©ŸÑ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {total_users}\nŸæÿ±ÿØÿßÿ≤ÿ¥ ÿ¥ÿØŸá: 0\nÿßÿ±ÿ≥ÿßŸÑ ŸÖŸàŸÅŸÇ: 0\nÿßÿ±ÿ≥ÿßŸÑ ŸÜÿßŸÖŸàŸÅŸÇ: 0\n⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ®ŸÑÿß⁄© ÿ¥ÿØŸá: 0\nÿ≤ŸÖÿßŸÜ: 0 ÿ´ÿßŸÜ€åŸá"
    )

    for idx, row in enumerate(rows, start=1):
        user_id = row[0]
        try:

            if content_type == "text":
                bot.send_message(user_id, message.text)
            elif content_type == "photo":

                bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption if hasattr(message, 'caption') else "")
            elif content_type == "document":
                bot.send_document(user_id, message.document.file_id, caption=message.caption if hasattr(message, 'caption') else "")
            elif content_type == "video":
                bot.send_video(user_id, message.video.file_id, caption=message.caption if hasattr(message, 'caption') else "")
            elif content_type == "audio":
                bot.send_audio(user_id, message.audio.file_id, caption=message.caption if hasattr(message, 'caption') else "")
            elif content_type == "voice":
                bot.send_voice(user_id, message.voice.file_id)
            else:
                if hasattr(message, 'text') and message.text:
                    bot.send_message(user_id, message.text)
                else:
                    bot.send_message(user_id, "Ÿæ€åÿßŸÖ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ŸÇÿßÿ®ŸÑ ÿßÿ±ÿ≥ÿßŸÑ ŸÜ€åÿ≥ÿ™.")
            success += 1
        except Exception as e:
            failed += 1
            if "blocked" in str(e).lower():
                blocked += 1

        if idx % 10 == 0 or idx == total_users:
            elapsed = int(time.time() - start_time)
            try:
                bot.edit_message_text(
                    f"ÿØÿ± ÿ≠ÿßŸÑ ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ...\n⁄©ŸÑ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {total_users}\nŸæÿ±ÿØÿßÿ≤ÿ¥ ÿ¥ÿØŸá: {idx}\nÿßÿ±ÿ≥ÿßŸÑ ŸÖŸàŸÅŸÇ: {success}\nÿßÿ±ÿ≥ÿßŸÑ ŸÜÿßŸÖŸàŸÅŸÇ: {failed}\n⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ®ŸÑÿß⁄© ÿ¥ÿØŸá: {blocked}\nÿ≤ŸÖÿßŸÜ: {elapsed} ÿ´ÿßŸÜ€åŸá",
                    message.chat.id, progress_msg.message_id
                )
            except Exception as e:
                pass

    total_time = int(time.time() - start_time)
    bot.reply_to(message, 
                 f"ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ ÿ®Ÿá ŸáŸÖŸá ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿ±ÿ≥€åÿØ.\n⁄©ŸÑ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {total_users}\nÿßÿ±ÿ≥ÿßŸÑ ŸÖŸàŸÅŸÇ: {success}\nÿßÿ±ÿ≥ÿßŸÑ ŸÜÿßŸÖŸàŸÅŸÇ: {failed}\n⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ®ŸÑÿß⁄© ÿ¥ÿØŸá: {blocked}\nÿ≤ŸÖÿßŸÜ ⁄©ŸÑ: {total_time} ÿ´ÿßŸÜ€åŸá")

def admin_referrals_page(call, page=0):
    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT referral_code, user_id FROM referral_links LIMIT 10 OFFSET ?", (page * 10,))
        rows = cursor.fetchall()
        cursor.execute("SELECT COUNT(*) FROM referral_links")
        total_referrals = cursor.fetchone()[0]
        conn.close()

    markup = types.InlineKeyboardMarkup()
    if rows:
        text = f"üìã ŸÑ€åÿ≥ÿ™ ⁄©ÿØŸáÿß€å ÿ±ŸÅÿ±ÿßŸÑ - ÿµŸÅÿ≠Ÿá {page+1}:\n\n"
        for idx, (code, user_id) in enumerate(rows, start=1 + page * 10):
            with db_lock:
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM used_referrals WHERE referral_code = ?", (code,))
                usage_count = cursor.fetchone()[0]
                conn.close()

            text += f"{idx}. üë§ ⁄©ÿßÿ±ÿ®ÿ±: {user_id} | üè∑Ô∏è ⁄©ÿØ: {code} | ÿßÿ≥ÿ™ŸÅÿßÿØŸá: {usage_count}\n"
            markup.add(
                types.InlineKeyboardButton(f"üóëÔ∏è ÿ≠ÿ∞ŸÅ {code}", callback_data=f"referral_delete|{code}|{page}")
            )
    else:
        text = " Ÿá€å⁄Ü ⁄©ÿØ ÿ±ŸÅÿ±ÿßŸÑ€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ."

    buttons = []
    if page > 0:
        buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è ŸÇÿ®ŸÑ€å", callback_data=f"admin_referrals_page_{page-1}"))
    if (page + 1) * 10 < total_referrals:
        buttons.append(types.InlineKeyboardButton("‚û°Ô∏è ÿ®ÿπÿØ€å", callback_data=f"admin_referrals_page_{page+1}"))

    if buttons:
        markup.add(*buttons)

    markup.add(types.InlineKeyboardButton(" ÿÆÿ±Ÿàÿ¨", callback_data="admin_referrals_exit"))

    try:
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)
    except Exception as e:
        print("ÿÆÿ∑ÿß ÿØÿ± Ÿà€åÿ±ÿß€åÿ¥ Ÿæ€åÿßŸÖ:", e)
        bot.send_message(call.message.chat.id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("referral_delete|"))
def handle_referral_delete(call):
    parts = call.data.split("|")
    if len(parts) < 3:
        return

    code = parts[1]
    try:
        page = int(parts[2])
    except ValueError:
        page = 0

    with db_lock:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM referral_links WHERE referral_code = ?", (code,))
        conn.commit()
        conn.close()

    bot.send_message(call.message.chat.id,f"ÿ≠ŸÑŸá {code}")
    admin_referrals_page(call, page=page)

@bot.callback_query_handler(func=lambda call: call.data == "admin_referrals_exit")
def handle_referrals_exit(call):
    bot.edit_message_text(" ÿπŸÖŸÑ€åÿßÿ™ ŸÖÿ¥ÿßŸáÿØŸá ⁄©ÿØŸáÿß€å ÿ±ŸÅÿ±ÿßŸÑ ÿ®Ÿá Ÿæÿß€åÿßŸÜ ÿ±ÿ≥€åÿØ.", call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_referrals"))
def admin_referrals_handler(call):
    if call.data == "admin_referrals":
        admin_referrals_page(call, page=0)
    elif call.data.startswith("admin_referrals_page_"):
        try:
            page = int(call.data.split("admin_referrals_page_")[-1])
        except ValueError:
            page = 0
        admin_referrals_page(call, page=page)

if __name__ == "__main__":
    print("‚úÖ ÿ±ÿ®ÿßÿ™ ŸÅÿπÿßŸÑ ÿ¥ÿØ!")
    bot.infinity_polling(timeout=30)